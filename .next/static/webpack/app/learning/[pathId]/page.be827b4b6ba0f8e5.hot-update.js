"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/learning/[pathId]/page",{

/***/ "(app-pages-browser)/./src/lib/data/learningPaths.ts":
/*!***************************************!*\
  !*** ./src/lib/data/learningPaths.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   learningPaths: () => (/* binding */ learningPaths)\n/* harmony export */ });\nconst learningPaths = [\n    {\n        id: 'intro-to-digital',\n        title: 'Introduction to Digital',\n        description: 'Master the fundamentals of digital technology and computer basics',\n        level: 'beginner',\n        sets: [\n            {\n                id: 'computer-basics',\n                title: 'Computer Basics',\n                description: 'Essential knowledge about computers and digital systems',\n                cards: [\n                    {\n                        id: 'cb-1',\n                        front: 'What is a CPU?',\n                        back: 'CPU (Central Processing Unit) is the primary component of a computer that processes instructions and performs calculations. It\\'s often called the \"brain\" of the computer.'\n                    },\n                    {\n                        id: 'cb-2',\n                        front: 'What is RAM?',\n                        back: 'RAM (Random Access Memory) is temporary storage that holds data and instructions for the CPU to process. It\\'s volatile memory, meaning it loses its contents when power is turned off.'\n                    },\n                    {\n                        id: 'cb-3',\n                        front: 'What is the difference between hardware and software?',\n                        back: 'Hardware refers to physical components of a computer (CPU, RAM, hard drive), while software refers to programs and applications that run on the hardware.'\n                    },\n                    {\n                        id: 'cb-4',\n                        front: 'What is an operating system?',\n                        back: 'An operating system (OS) is software that manages computer hardware and software resources, providing common services for computer programs.'\n                    },\n                    {\n                        id: 'cb-5',\n                        front: 'What is a motherboard?',\n                        back: 'The motherboard is the main circuit board of a computer that connects all components together, including CPU, RAM, storage, and other peripherals.'\n                    },\n                    {\n                        id: 'cb-6',\n                        front: 'What is a GPU?',\n                        back: 'GPU (Graphics Processing Unit) is a specialized processor designed to handle graphics and image processing tasks. It\\'s essential for gaming and visual applications.'\n                    },\n                    {\n                        id: 'cb-7',\n                        front: 'What is a hard drive?',\n                        back: 'A hard drive is a non-volatile storage device that permanently stores and retrieves data. It can be mechanical (HDD) or solid-state (SSD).'\n                    },\n                    {\n                        id: 'cb-8',\n                        front: 'What is a network interface card (NIC)?',\n                        back: 'A NIC is a hardware component that allows computers to connect to a network. It can be wired (Ethernet) or wireless (Wi-Fi).'\n                    },\n                    {\n                        id: 'cb-9',\n                        front: 'What is a power supply unit (PSU)?',\n                        back: 'A PSU converts electrical power from an outlet into usable power for the computer\\'s components. It provides different voltage levels for various parts.'\n                    },\n                    {\n                        id: 'cb-10',\n                        front: 'What is a BIOS?',\n                        back: 'BIOS (Basic Input/Output System) is firmware that initializes hardware during the boot process and provides runtime services for operating systems.'\n                    },\n                    {\n                        id: 'cb-11',\n                        front: 'What is a port?',\n                        back: 'A port is a physical or virtual connection point that allows data to be transferred between devices. Examples include USB, HDMI, and network ports.'\n                    },\n                    {\n                        id: 'cb-12',\n                        front: 'What is a peripheral device?',\n                        back: 'A peripheral is an external device that connects to a computer to provide input or output functionality, such as keyboards, mice, and printers.'\n                    },\n                    {\n                        id: 'cb-13',\n                        front: 'What is a driver?',\n                        back: 'A driver is software that allows the operating system to communicate with hardware devices. It translates OS commands into device-specific instructions.'\n                    },\n                    {\n                        id: 'cb-14',\n                        front: 'What is a cache?',\n                        back: 'Cache is a small, fast memory that stores frequently accessed data to improve performance. It exists at multiple levels in a computer system.'\n                    },\n                    {\n                        id: 'cb-15',\n                        front: 'What is a bus?',\n                        back: 'A bus is a communication system that transfers data between components inside a computer or between computers. It can be parallel or serial.'\n                    },\n                    {\n                        id: 'cb-16',\n                        front: 'What is a chipset?',\n                        back: 'A chipset is a set of electronic components that manages data flow between the processor, memory, and peripherals. It\\'s part of the motherboard.'\n                    },\n                    {\n                        id: 'cb-17',\n                        front: 'What is a heat sink?',\n                        back: 'A heat sink is a passive cooling device that absorbs and dissipates heat from electronic components, typically the CPU or GPU.'\n                    },\n                    {\n                        id: 'cb-18',\n                        front: 'What is a fan?',\n                        back: 'A fan is an active cooling device that moves air to cool computer components. It helps prevent overheating and maintains optimal performance.'\n                    },\n                    {\n                        id: 'cb-19',\n                        front: 'What is a battery?',\n                        back: 'A battery provides power to portable devices when not connected to an electrical outlet. It stores electrical energy chemically and converts it to electrical power.'\n                    },\n                    {\n                        id: 'cb-20',\n                        front: 'What is a display?',\n                        back: 'A display is an output device that shows visual information. Common types include LCD, LED, and OLED screens, measured in pixels and refresh rates.'\n                    }\n                ]\n            },\n            {\n                id: 'digital-concepts',\n                title: 'Digital Concepts',\n                description: 'Understanding digital data and binary systems',\n                cards: [\n                    {\n                        id: 'dc-1',\n                        front: 'What is binary?',\n                        back: 'Binary is a number system that uses only two digits: 0 and 1. It\\'s the fundamental language of computers, where each digit is called a bit.'\n                    },\n                    {\n                        id: 'dc-2',\n                        front: 'What is a byte?',\n                        back: 'A byte is a unit of digital information that consists of 8 bits. It\\'s the basic unit of storage in computer systems.'\n                    },\n                    {\n                        id: 'dc-3',\n                        front: 'What is ASCII?',\n                        back: 'ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers. It uses 7 bits to represent 128 characters.'\n                    },\n                    {\n                        id: 'dc-4',\n                        front: 'What is Unicode?',\n                        back: 'Unicode is a character encoding standard that can represent almost all characters from all writing systems in the world. It\\'s an extension of ASCII.'\n                    },\n                    {\n                        id: 'dc-5',\n                        front: 'What is the difference between analog and digital?',\n                        back: 'Analog signals are continuous and can have any value, while digital signals are discrete and can only have specific values (usually 0 and 1).'\n                    },\n                    {\n                        id: 'dc-6',\n                        front: 'What is a bit?',\n                        back: 'A bit (binary digit) is the smallest unit of data in computing, representing either 0 or 1. It\\'s the fundamental building block of digital information.'\n                    },\n                    {\n                        id: 'dc-7',\n                        front: 'What is a kilobyte (KB)?',\n                        back: 'A kilobyte is 1024 bytes (2^10 bytes). It\\'s commonly used to measure small amounts of data storage.'\n                    },\n                    {\n                        id: 'dc-8',\n                        front: 'What is a megabyte (MB)?',\n                        back: 'A megabyte is 1024 kilobytes (2^20 bytes). It\\'s used to measure medium-sized files and storage capacity.'\n                    },\n                    {\n                        id: 'dc-9',\n                        front: 'What is a gigabyte (GB)?',\n                        back: 'A gigabyte is 1024 megabytes (2^30 bytes). It\\'s used to measure large files and storage devices.'\n                    },\n                    {\n                        id: 'dc-10',\n                        front: 'What is a terabyte (TB)?',\n                        back: 'A terabyte is 1024 gigabytes (2^40 bytes). It\\'s used to measure very large storage capacities.'\n                    },\n                    {\n                        id: 'dc-11',\n                        front: 'What is hexadecimal?',\n                        back: 'Hexadecimal is a base-16 number system using digits 0-9 and letters A-F. It\\'s commonly used in computing to represent binary data more compactly.'\n                    },\n                    {\n                        id: 'dc-12',\n                        front: 'What is a pixel?',\n                        back: 'A pixel (picture element) is the smallest unit of a digital image. It\\'s a single point in a raster image, containing color information.'\n                    },\n                    {\n                        id: 'dc-13',\n                        front: 'What is resolution?',\n                        back: 'Resolution is the number of pixels in a display or image, typically expressed as width × height (e.g., 1920×1080).'\n                    },\n                    {\n                        id: 'dc-14',\n                        front: 'What is a color depth?',\n                        back: 'Color depth is the number of bits used to represent the color of a single pixel. Common depths are 8-bit (256 colors) and 24-bit (16.7 million colors).'\n                    },\n                    {\n                        id: 'dc-15',\n                        front: 'What is a file format?',\n                        back: 'A file format is a standard way of encoding information for storage in a computer file. Examples include JPEG, PNG, MP3, and PDF.'\n                    },\n                    {\n                        id: 'dc-16',\n                        front: 'What is compression?',\n                        back: 'Compression is the process of reducing the size of data files by encoding information more efficiently. It can be lossless or lossy.'\n                    },\n                    {\n                        id: 'dc-17',\n                        front: 'What is a protocol?',\n                        back: 'A protocol is a set of rules that define how data is transmitted and received over a network. Examples include HTTP, FTP, and TCP/IP.'\n                    },\n                    {\n                        id: 'dc-18',\n                        front: 'What is bandwidth?',\n                        back: 'Bandwidth is the maximum rate of data transfer across a network or communication channel, typically measured in bits per second (bps).'\n                    },\n                    {\n                        id: 'dc-19',\n                        front: 'What is latency?',\n                        back: 'Latency is the time delay between sending and receiving data. It\\'s typically measured in milliseconds and affects real-time applications.'\n                    },\n                    {\n                        id: 'dc-20',\n                        front: 'What is encryption?',\n                        back: 'Encryption is the process of encoding information to make it secure and unreadable to unauthorized parties. It uses algorithms and keys to protect data.'\n                    }\n                ]\n            }\n        ],\n        quiz: {\n            questions: [\n                {\n                    id: 'q1',\n                    question: 'Which component is often called the \"brain\" of the computer?',\n                    options: [\n                        'RAM',\n                        'CPU',\n                        'Hard Drive',\n                        'Motherboard'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q2',\n                    question: 'What is the main difference between RAM and ROM?',\n                    options: [\n                        'RAM is faster than ROM',\n                        'RAM is volatile, ROM is non-volatile',\n                        'RAM is cheaper than ROM',\n                        'RAM is newer technology than ROM'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q3',\n                    question: 'How many bits are in a byte?',\n                    options: [\n                        '4',\n                        '8',\n                        '16',\n                        '32'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q4',\n                    question: 'What is the purpose of an operating system?',\n                    options: [\n                        'To make the computer look pretty',\n                        'To manage hardware and software resources',\n                        'To connect to the internet',\n                        'To store data permanently'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q5',\n                    question: 'Which of the following is NOT a binary number?',\n                    options: [\n                        '1010',\n                        '1111',\n                        '1234',\n                        '1001'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q6',\n                    question: 'What is the main function of a GPU?',\n                    options: [\n                        'Process text documents',\n                        'Handle graphics and image processing',\n                        'Store data permanently',\n                        'Connect to the internet'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q7',\n                    question: 'What is the difference between HDD and SSD?',\n                    options: [\n                        'HDD is faster than SSD',\n                        'SSD has no moving parts, HDD does',\n                        'HDD is newer technology than SSD',\n                        'SSD is always larger than HDD'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q8',\n                    question: 'What is the purpose of a network interface card?',\n                    options: [\n                        'Process graphics',\n                        'Store data',\n                        'Connect to a network',\n                        'Power the computer'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q9',\n                    question: 'What is the main function of a power supply unit?',\n                    options: [\n                        'Process data',\n                        'Store information',\n                        'Convert electrical power',\n                        'Display images'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q10',\n                    question: 'What is the purpose of a BIOS?',\n                    options: [\n                        'Display graphics',\n                        'Store user data',\n                        'Initialize hardware during boot',\n                        'Connect to the internet'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q11',\n                    question: 'What is a peripheral device?',\n                    options: [\n                        'The main processor',\n                        'An external device that provides input/output',\n                        'The operating system',\n                        'The power supply'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q12',\n                    question: 'What is the purpose of a driver?',\n                    options: [\n                        'Power the computer',\n                        'Store data',\n                        'Allow OS to communicate with hardware',\n                        'Display graphics'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q13',\n                    question: 'What is the main purpose of a cache?',\n                    options: [\n                        'Store permanent data',\n                        'Improve performance with frequently accessed data',\n                        'Power the computer',\n                        'Display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q14',\n                    question: 'What is the function of a heat sink?',\n                    options: [\n                        'Store data',\n                        'Process information',\n                        'Cool electronic components',\n                        'Display images'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q15',\n                    question: 'What is the purpose of a fan in a computer?',\n                    options: [\n                        'Store data',\n                        'Process information',\n                        'Cool components',\n                        'Display graphics'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q16',\n                    question: 'What is the main difference between analog and digital signals?',\n                    options: [\n                        'Digital signals are always faster',\n                        'Analog signals are always more accurate',\n                        'Analog signals are continuous, digital are discrete',\n                        'Digital signals are always more expensive'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q17',\n                    question: 'What is the purpose of Unicode?',\n                    options: [\n                        'Store binary data',\n                        'Represent characters from all writing systems',\n                        'Process graphics',\n                        'Connect to networks'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q18',\n                    question: 'What is the main purpose of compression?',\n                    options: [\n                        'Improve image quality',\n                        'Reduce file size',\n                        'Increase processing speed',\n                        'Enhance security'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q19',\n                    question: 'What is the purpose of a protocol?',\n                    options: [\n                        'Store data',\n                        'Define rules for data transmission',\n                        'Process graphics',\n                        'Power the computer'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q20',\n                    question: 'What is the main purpose of encryption?',\n                    options: [\n                        'Improve performance',\n                        'Reduce file size',\n                        'Make data secure and unreadable',\n                        'Enhance graphics'\n                    ],\n                    correctAnswer: 2\n                }\n            ]\n        }\n    },\n    {\n        id: 'intro-to-programming',\n        title: 'Introduction to Programming',\n        description: 'Learn the basics of programming and computational thinking',\n        level: 'beginner',\n        sets: [\n            {\n                id: 'programming-basics',\n                title: 'Programming Fundamentals',\n                description: 'Core concepts of programming and problem-solving',\n                cards: [\n                    {\n                        id: 'pb-1',\n                        front: 'What is a variable?',\n                        back: 'A variable is a named container that stores data in a program. It can hold different types of values (numbers, text, etc.) and its value can change during program execution.'\n                    },\n                    {\n                        id: 'pb-2',\n                        front: 'What is a function?',\n                        back: 'A function is a reusable block of code that performs a specific task. It can take inputs (parameters) and return outputs.'\n                    },\n                    {\n                        id: 'pb-3',\n                        front: 'What is a loop?',\n                        back: 'A loop is a programming structure that repeats a block of code multiple times. Common types include for loops and while loops.'\n                    },\n                    {\n                        id: 'pb-4',\n                        front: 'What is an algorithm?',\n                        back: 'An algorithm is a step-by-step procedure for solving a problem or accomplishing a task. It\\'s like a recipe for a computer to follow.'\n                    },\n                    {\n                        id: 'pb-5',\n                        front: 'What is debugging?',\n                        back: 'Debugging is the process of finding and fixing errors (bugs) in a program. It involves identifying the cause of the error and making the necessary corrections.'\n                    },\n                    {\n                        id: 'pb-6',\n                        front: 'What is a conditional statement?',\n                        back: 'A conditional statement is a programming structure that executes different code blocks based on whether a condition is true or false. Examples include if-else statements.'\n                    },\n                    {\n                        id: 'pb-7',\n                        front: 'What is a comment?',\n                        back: 'A comment is text in the code that is not executed. It\\'s used to explain what the code does and make it more readable for other programmers.'\n                    },\n                    {\n                        id: 'pb-8',\n                        front: 'What is a data type?',\n                        back: 'A data type defines the kind of data a variable can hold and the operations that can be performed on it. Common types include integers, strings, and booleans.'\n                    },\n                    {\n                        id: 'pb-9',\n                        front: 'What is an operator?',\n                        back: 'An operator is a symbol that performs operations on values. Examples include arithmetic operators (+, -, *, /) and comparison operators (==, !=, >, <).'\n                    },\n                    {\n                        id: 'pb-10',\n                        front: 'What is a constant?',\n                        back: 'A constant is a variable whose value cannot be changed after it\\'s assigned. It\\'s used for values that should remain the same throughout the program.'\n                    },\n                    {\n                        id: 'pb-11',\n                        front: 'What is scope?',\n                        back: 'Scope defines where a variable can be accessed in a program. Variables can have global scope (accessible everywhere) or local scope (accessible only within a function).'\n                    },\n                    {\n                        id: 'pb-12',\n                        front: 'What is a parameter?',\n                        back: 'A parameter is a variable that is passed to a function when it\\'s called. It allows the function to work with different values each time it\\'s used.'\n                    },\n                    {\n                        id: 'pb-13',\n                        front: 'What is a return value?',\n                        back: 'A return value is the output of a function. It\\'s the result that the function sends back to the code that called it.'\n                    },\n                    {\n                        id: 'pb-14',\n                        front: 'What is an array?',\n                        back: 'An array is a data structure that stores a collection of elements, each identified by an index. Elements can be accessed directly using their index.'\n                    },\n                    {\n                        id: 'pb-15',\n                        front: 'What is a string?',\n                        back: 'A string is a sequence of characters. In programming, strings are typically used to represent text.'\n                    },\n                    {\n                        id: 'pb-16',\n                        front: 'What is a boolean?',\n                        back: 'A boolean is a data type that can have only two values: true or false. It\\'s used for logical operations and conditions.'\n                    },\n                    {\n                        id: 'pb-17',\n                        front: 'What is a list?',\n                        back: 'A list is a data structure that can store multiple items in a single variable. Unlike arrays, lists can store items of different types.'\n                    },\n                    {\n                        id: 'pb-18',\n                        front: 'What is a dictionary/map?',\n                        back: 'A dictionary (or map) is a data structure that stores key-value pairs. Each value is associated with a unique key that can be used to access it.'\n                    },\n                    {\n                        id: 'pb-19',\n                        front: 'What is a class?',\n                        back: 'A class is a blueprint for creating objects. It defines the properties and methods that objects of that class will have.'\n                    },\n                    {\n                        id: 'pb-20',\n                        front: 'What is an object?',\n                        back: 'An object is an instance of a class. It contains data (properties) and code (methods) that operate on that data.'\n                    }\n                ]\n            },\n            {\n                id: 'programming-concepts',\n                title: 'Advanced Programming Concepts',\n                description: 'Understanding complex programming concepts and patterns',\n                cards: [\n                    {\n                        id: 'pc-1',\n                        front: 'What is object-oriented programming (OOP)?',\n                        back: 'OOP is a programming paradigm that organizes code into objects that contain data and code. It emphasizes reusability and maintainability.'\n                    },\n                    {\n                        id: 'pc-2',\n                        front: 'What is inheritance?',\n                        back: 'Inheritance is a mechanism that allows a class to inherit properties and methods from another class. It promotes code reuse and establishes relationships between classes.'\n                    },\n                    {\n                        id: 'pc-3',\n                        front: 'What is polymorphism?',\n                        back: 'Polymorphism is the ability of different objects to respond to the same method call in different ways. It allows for flexible and extensible code.'\n                    },\n                    {\n                        id: 'pc-4',\n                        front: 'What is encapsulation?',\n                        back: 'Encapsulation is the bundling of data and methods that operate on that data within a single unit (class). It helps protect data from unauthorized access.'\n                    },\n                    {\n                        id: 'pc-5',\n                        front: 'What is abstraction?',\n                        back: 'Abstraction is the process of hiding complex implementation details and showing only the necessary features of an object. It helps manage complexity.'\n                    },\n                    {\n                        id: 'pc-6',\n                        front: 'What is a design pattern?',\n                        back: 'A design pattern is a reusable solution to common problems in software design. It provides a template for solving similar problems in different contexts.'\n                    },\n                    {\n                        id: 'pc-7',\n                        front: 'What is recursion?',\n                        back: 'Recursion is a programming technique where a function calls itself to solve a problem. It\\'s useful for problems that can be broken down into smaller, similar subproblems.'\n                    },\n                    {\n                        id: 'pc-8',\n                        front: 'What is a stack?',\n                        back: 'A stack is a data structure that follows the Last-In-First-Out (LIFO) principle. Elements can only be added or removed from the top of the stack.'\n                    },\n                    {\n                        id: 'pc-9',\n                        front: 'What is a queue?',\n                        back: 'A queue is a data structure that follows the First-In-First-Out (FIFO) principle. Elements are added to the end and removed from the front.'\n                    },\n                    {\n                        id: 'pc-10',\n                        front: 'What is a tree?',\n                        back: 'A tree is a hierarchical data structure with nodes connected by edges. Each node can have multiple children but only one parent (except the root).'\n                    },\n                    {\n                        id: 'pc-11',\n                        front: 'What is a graph?',\n                        back: 'A graph is a data structure consisting of nodes (vertices) connected by edges. It can represent complex relationships between objects.'\n                    },\n                    {\n                        id: 'pc-12',\n                        front: 'What is a hash table?',\n                        back: 'A hash table is a data structure that maps keys to values using a hash function. It provides fast access to data based on keys.'\n                    },\n                    {\n                        id: 'pc-13',\n                        front: 'What is a binary search?',\n                        back: 'Binary search is an efficient algorithm for finding an element in a sorted array. It repeatedly divides the search interval in half.'\n                    },\n                    {\n                        id: 'pc-14',\n                        front: 'What is a sorting algorithm?',\n                        back: 'A sorting algorithm is a method for arranging elements in a specific order. Common algorithms include bubble sort, quick sort, and merge sort.'\n                    },\n                    {\n                        id: 'pc-15',\n                        front: 'What is a linked list?',\n                        back: 'A linked list is a data structure where elements are stored in nodes, and each node points to the next node. It allows for efficient insertion and deletion.'\n                    },\n                    {\n                        id: 'pc-16',\n                        front: 'What is a binary tree?',\n                        back: 'A binary tree is a tree data structure where each node has at most two children, referred to as the left child and right child.'\n                    },\n                    {\n                        id: 'pc-17',\n                        front: 'What is a heap?',\n                        back: 'A heap is a specialized tree-based data structure that satisfies the heap property. It\\'s commonly used to implement priority queues.'\n                    },\n                    {\n                        id: 'pc-18',\n                        front: 'What is a set?',\n                        back: 'A set is a data structure that stores unique elements. It doesn\\'t allow duplicates and provides efficient operations for adding, removing, and checking membership.'\n                    },\n                    {\n                        id: 'pc-19',\n                        front: 'What is a map?',\n                        back: 'A map is a data structure that stores key-value pairs. It provides efficient lookup, insertion, and deletion operations based on keys.'\n                    },\n                    {\n                        id: 'pc-20',\n                        front: 'What is a stack overflow?',\n                        back: 'A stack overflow occurs when a program tries to use more stack space than is available, typically due to infinite recursion or very deep recursion.'\n                    }\n                ]\n            }\n        ],\n        quiz: {\n            questions: [\n                {\n                    id: 'q1',\n                    question: 'What is the purpose of a variable in programming?',\n                    options: [\n                        'To make the code look pretty',\n                        'To store and manipulate data',\n                        'To connect to the internet',\n                        'To display text on screen'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q2',\n                    question: 'Which of the following is NOT a common loop type?',\n                    options: [\n                        'for loop',\n                        'while loop',\n                        'if loop',\n                        'do-while loop'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q3',\n                    question: 'What is the main difference between an array and a list?',\n                    options: [\n                        'Arrays are faster than lists',\n                        'Lists can store different types of data, arrays cannot',\n                        'Arrays are newer than lists',\n                        'Lists are always larger than arrays'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q4',\n                    question: 'What is the purpose of a function?',\n                    options: [\n                        'To make the code longer',\n                        'To store data permanently',\n                        'To perform a specific task',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q5',\n                    question: 'What is the main purpose of debugging?',\n                    options: [\n                        'To make the code run faster',\n                        'To find and fix errors',\n                        'To add new features',\n                        'To improve graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q6',\n                    question: 'What is the purpose of a conditional statement?',\n                    options: [\n                        'To store data',\n                        'To repeat code',\n                        'To make decisions in code',\n                        'To display text'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q7',\n                    question: 'What is the main purpose of comments in code?',\n                    options: [\n                        'To make the code run faster',\n                        'To explain what the code does',\n                        'To store data',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q8',\n                    question: 'What is the purpose of a data type?',\n                    options: [\n                        'To make the code look pretty',\n                        'To define what kind of data can be stored',\n                        'To connect to the internet',\n                        'To display text'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q9',\n                    question: 'What is the main purpose of a constant?',\n                    options: [\n                        'To store changing data',\n                        'To store data that cannot be changed',\n                        'To make the code run faster',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q10',\n                    question: 'What is the purpose of scope in programming?',\n                    options: [\n                        'To make the code look pretty',\n                        'To define where variables can be accessed',\n                        'To connect to the internet',\n                        'To display text'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q11',\n                    question: 'What is the main purpose of parameters in a function?',\n                    options: [\n                        'To make the function longer',\n                        'To allow the function to work with different values',\n                        'To store data permanently',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q12',\n                    question: 'What is the purpose of a return value?',\n                    options: [\n                        'To make the function longer',\n                        'To send data back from a function',\n                        'To store data permanently',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q13',\n                    question: 'What is the main purpose of a class?',\n                    options: [\n                        'To store data',\n                        'To create objects with properties and methods',\n                        'To connect to the internet',\n                        'To display text'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q14',\n                    question: 'What is the purpose of inheritance?',\n                    options: [\n                        'To make the code longer',\n                        'To reuse code from another class',\n                        'To store data',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q15',\n                    question: 'What is the main purpose of polymorphism?',\n                    options: [\n                        'To make the code longer',\n                        'To allow different objects to respond to the same method',\n                        'To store data',\n                        'To display text'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q16',\n                    question: 'What is the purpose of encapsulation?',\n                    options: [\n                        'To make the code longer',\n                        'To protect data from unauthorized access',\n                        'To connect to the internet',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q17',\n                    question: 'What is the main purpose of abstraction?',\n                    options: [\n                        'To make the code longer',\n                        'To hide complex implementation details',\n                        'To store data',\n                        'To display text'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q18',\n                    question: 'What is the purpose of a design pattern?',\n                    options: [\n                        'To make the code longer',\n                        'To provide reusable solutions to common problems',\n                        'To store data',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q19',\n                    question: 'What is the main purpose of recursion?',\n                    options: [\n                        'To make the code longer',\n                        'To solve problems by breaking them into smaller subproblems',\n                        'To store data',\n                        'To display text'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q20',\n                    question: 'What is the purpose of a stack overflow?',\n                    options: [\n                        'To make the code longer',\n                        'To indicate that the program has used too much stack space',\n                        'To store data',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                }\n            ]\n        }\n    },\n    {\n        id: 'javascript-basics',\n        title: 'JavaScript Basics',\n        description: 'Master the fundamentals of JavaScript programming language',\n        level: 'beginner',\n        sets: [\n            {\n                id: 'variables-and-types',\n                title: 'Variables and Data Types',\n                description: 'Learn about variables, primitive types, and type coercion',\n                cards: [\n                    {\n                        id: 'var-let-const',\n                        front: 'What are the three ways to declare variables in JavaScript?',\n                        back: 'var, let, and const. var is function-scoped, let and const are block-scoped. const cannot be reassigned.'\n                    },\n                    {\n                        id: 'primitive-types',\n                        front: 'What are the primitive types in JavaScript?',\n                        back: 'String, Number, Boolean, Null, Undefined, Symbol, and BigInt'\n                    },\n                    {\n                        id: 'type-coercion',\n                        front: 'What is type coercion in JavaScript?',\n                        back: 'The automatic conversion of values from one data type to another. For example, \"5\" + 3 results in \"53\"'\n                    },\n                    {\n                        id: 'typeof-operator',\n                        front: 'What does the typeof operator return for null?',\n                        back: 'typeof null returns \"object\", which is a known JavaScript quirk'\n                    },\n                    {\n                        id: 'hoisting',\n                        front: 'What is hoisting in JavaScript?',\n                        back: 'The process where variable and function declarations are moved to the top of their scope before code execution'\n                    }\n                ]\n            },\n            {\n                id: 'functions',\n                title: 'Functions and Scope',\n                description: 'Understand function declarations, expressions, and scope',\n                cards: [\n                    {\n                        id: 'function-declaration',\n                        front: 'What is a function declaration?',\n                        back: 'A function that is declared using the function keyword and is hoisted to the top of its scope'\n                    },\n                    {\n                        id: 'arrow-functions',\n                        front: 'What are arrow functions?',\n                        back: 'A shorter syntax for writing function expressions, introduced in ES6. They don\\'t have their own this binding'\n                    },\n                    {\n                        id: 'closure',\n                        front: 'What is a closure in JavaScript?',\n                        back: 'A function that has access to variables from its outer (enclosing) lexical scope, even after the outer function has returned'\n                    },\n                    {\n                        id: 'scope',\n                        front: 'What are the different types of scope in JavaScript?',\n                        back: 'Global scope, function scope, and block scope (introduced with let and const)'\n                    },\n                    {\n                        id: 'this-keyword',\n                        front: 'What is the this keyword in JavaScript?',\n                        back: 'A reference to the object that is currently executing the code. Its value depends on how a function is called'\n                    }\n                ]\n            }\n        ],\n        quiz: {\n            questions: [\n                {\n                    id: 'q1',\n                    question: 'Which of the following is NOT a primitive type in JavaScript?',\n                    options: [\n                        'String',\n                        'Number',\n                        'Object',\n                        'Boolean'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q2',\n                    question: 'What is the output of typeof null?',\n                    options: [\n                        '\"null\"',\n                        '\"object\"',\n                        '\"undefined\"',\n                        '\"number\"'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q3',\n                    question: 'Which variable declaration is block-scoped?',\n                    options: [\n                        'var',\n                        'let',\n                        'const',\n                        'Both let and const'\n                    ],\n                    correctAnswer: 3\n                },\n                {\n                    id: 'q4',\n                    question: 'What is a closure in JavaScript?',\n                    options: [\n                        'A function that returns another function',\n                        'A function that has access to variables from its outer scope',\n                        'A function that takes another function as an argument',\n                        'A function that is called immediately after declaration'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q5',\n                    question: 'Which of the following is true about arrow functions?',\n                    options: [\n                        'They have their own this binding',\n                        'They can be used as constructors',\n                        'They don\\'t have their own this binding',\n                        'They are always hoisted'\n                    ],\n                    correctAnswer: 2\n                }\n            ]\n        }\n    },\n    {\n        id: 'react-basics',\n        title: 'React Fundamentals',\n        description: 'Learn the core concepts of React and build modern web applications',\n        level: 'intermediate',\n        sets: [\n            {\n                id: 'components-props',\n                title: 'Components and Props',\n                description: 'Understand React components, props, and component composition',\n                cards: [\n                    {\n                        id: 'functional-components',\n                        front: 'What is a functional component in React?',\n                        back: 'A JavaScript function that accepts props as an argument and returns a React element'\n                    },\n                    {\n                        id: 'props',\n                        front: 'What are props in React?',\n                        back: 'Props (properties) are read-only components that are passed from parent to child components'\n                    },\n                    {\n                        id: 'component-composition',\n                        front: 'What is component composition?',\n                        back: 'The process of combining multiple components to create more complex UIs'\n                    },\n                    {\n                        id: 'prop-types',\n                        front: 'What are PropTypes?',\n                        back: 'A way to specify the type of props a component should receive, helping with debugging'\n                    },\n                    {\n                        id: 'default-props',\n                        front: 'How do you set default props in React?',\n                        back: 'Using the defaultProps property or by using default parameters in the function component'\n                    }\n                ]\n            },\n            {\n                id: 'state-hooks',\n                title: 'State and Hooks',\n                description: 'Master React state management and hooks',\n                cards: [\n                    {\n                        id: 'useState',\n                        front: 'What is the useState hook?',\n                        back: 'A hook that lets you add state to functional components'\n                    },\n                    {\n                        id: 'useEffect',\n                        front: 'What is the useEffect hook?',\n                        back: 'A hook that lets you perform side effects in functional components'\n                    },\n                    {\n                        id: 'useContext',\n                        front: 'What is the useContext hook?',\n                        back: 'A hook that lets you consume context in functional components'\n                    },\n                    {\n                        id: 'useReducer',\n                        front: 'What is the useReducer hook?',\n                        back: 'A hook that lets you manage complex state logic using reducers'\n                    },\n                    {\n                        id: 'custom-hooks',\n                        front: 'What are custom hooks?',\n                        back: 'JavaScript functions that start with \"use\" and can call other hooks'\n                    }\n                ]\n            }\n        ],\n        quiz: {\n            questions: [\n                {\n                    id: 'q1',\n                    question: 'What is the main difference between props and state?',\n                    options: [\n                        'Props are mutable, state is immutable',\n                        'Props are immutable, state is mutable',\n                        'Props are for styling, state is for data',\n                        'Props are for functions, state is for variables'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q2',\n                    question: 'Which hook is used for side effects?',\n                    options: [\n                        'useState',\n                        'useEffect',\n                        'useContext',\n                        'useReducer'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q3',\n                    question: 'What is the correct way to update state in a functional component?',\n                    options: [\n                        'this.setState()',\n                        'setState()',\n                        'useState()',\n                        'Using the setter function from useState'\n                    ],\n                    correctAnswer: 3\n                },\n                {\n                    id: 'q4',\n                    question: 'Which of the following is NOT a built-in React hook?',\n                    options: [\n                        'useState',\n                        'useEffect',\n                        'useData',\n                        'useContext'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q5',\n                    question: 'What is the purpose of the key prop in React lists?',\n                    options: [\n                        'To style the list items',\n                        'To make the list items clickable',\n                        'To help React identify which items have changed',\n                        'To sort the list items'\n                    ],\n                    correctAnswer: 2\n                }\n            ]\n        }\n    },\n    {\n        id: 'git-github-basics',\n        title: 'Git & GitHub Essentials',\n        description: 'Master version control with Git and GitHub',\n        level: 'beginner',\n        sets: [\n            {\n                id: 'git-basics',\n                title: 'Basic Git Commands',\n                description: 'Essential Git commands for version control',\n                cards: [\n                    {\n                        id: 'gb-1',\n                        front: 'What is the command to initialize a new Git repository?',\n                        back: 'git init - This command creates a new Git repository in the current directory.'\n                    },\n                    {\n                        id: 'gb-2',\n                        front: 'How do you check the status of your Git repository?',\n                        back: 'git status - Shows the current state of your working directory and staging area.'\n                    },\n                    {\n                        id: 'gb-3',\n                        front: 'What command adds files to the staging area?',\n                        back: 'git add <filename> or git add . - Adds files to the staging area. Use . to add all files.'\n                    },\n                    {\n                        id: 'gb-4',\n                        front: 'How do you commit changes in Git?',\n                        back: 'git commit -m \"your message\" - Creates a new commit with the staged changes and a descriptive message.'\n                    },\n                    {\n                        id: 'gb-5',\n                        front: 'What command shows the commit history?',\n                        back: 'git log - Displays the commit history with details like author, date, and commit message.'\n                    },\n                    {\n                        id: 'gb-6',\n                        front: 'How do you view the differences between your working directory and the last commit?',\n                        back: 'git diff - Shows the differences between your working directory and the last commit.'\n                    },\n                    {\n                        id: 'gb-7',\n                        front: 'What command shows the differences between staged changes and the last commit?',\n                        back: 'git diff --staged - Shows the differences between staged changes and the last commit.'\n                    },\n                    {\n                        id: 'gb-8',\n                        front: 'How do you remove a file from Git tracking while keeping it in your working directory?',\n                        back: 'git rm --cached <filename> - Removes the file from Git tracking but keeps it in your working directory.'\n                    },\n                    {\n                        id: 'gb-9',\n                        front: 'What command shows the commit history in a more concise format?',\n                        back: 'git log --oneline - Shows each commit on a single line with its hash and message.'\n                    },\n                    {\n                        id: 'gb-10',\n                        front: 'How do you view the changes in a specific commit?',\n                        back: 'git show <commit-hash> - Shows the changes made in the specified commit.'\n                    },\n                    {\n                        id: 'gb-11',\n                        front: 'What command helps you create a more detailed commit message?',\n                        back: 'git commit - Opens your default editor to write a detailed commit message.'\n                    },\n                    {\n                        id: 'gb-12',\n                        front: 'How do you amend the last commit message?',\n                        back: 'git commit --amend -m \"new message\" - Changes the message of the last commit.'\n                    },\n                    {\n                        id: 'gb-13',\n                        front: 'What command shows the current Git configuration?',\n                        back: 'git config --list - Shows all Git configuration settings.'\n                    },\n                    {\n                        id: 'gb-14',\n                        front: 'How do you set your Git username and email?',\n                        back: 'git config --global user.name \"Your Name\" and git config --global user.email \"your.email@example.com\"'\n                    },\n                    {\n                        id: 'gb-15',\n                        front: 'What command helps you find a specific commit by its message?',\n                        back: 'git log --grep=\"search term\" - Searches commit messages for the specified term.'\n                    },\n                    {\n                        id: 'gb-16',\n                        front: 'How do you view the commit history of a specific file?',\n                        back: 'git log --follow <filename> - Shows the commit history of a file, including its previous names.'\n                    },\n                    {\n                        id: 'gb-17',\n                        front: 'What command shows the changes made by each commit?',\n                        back: 'git log -p - Shows the patch (changes) for each commit.'\n                    },\n                    {\n                        id: 'gb-18',\n                        front: 'How do you create a new commit that undoes all changes from a specific commit?',\n                        back: 'git revert <commit-hash> - Creates a new commit that undoes the changes from the specified commit.'\n                    },\n                    {\n                        id: 'gb-19',\n                        front: 'What command helps you clean up untracked files?',\n                        back: 'git clean -n (dry run) or git clean -f (force) - Removes untracked files from the working directory.'\n                    },\n                    {\n                        id: 'gb-20',\n                        front: 'How do you view the commit history in a graphical format?',\n                        back: 'git log --graph --oneline --all - Shows a graphical representation of the commit history.'\n                    }\n                ]\n            },\n            {\n                id: 'git-branching',\n                title: 'Git Branching',\n                description: 'Working with branches in Git',\n                cards: [\n                    {\n                        id: 'br-1',\n                        front: 'How do you create a new branch?',\n                        back: 'git branch <branch-name> - Creates a new branch. Use git checkout -b <branch-name> to create and switch to it.'\n                    },\n                    {\n                        id: 'br-2',\n                        front: 'What command switches to a different branch?',\n                        back: 'git checkout <branch-name> - Switches to the specified branch.'\n                    },\n                    {\n                        id: 'br-3',\n                        front: 'How do you merge a branch into your current branch?',\n                        back: 'git merge <branch-name> - Merges the specified branch into your current branch.'\n                    },\n                    {\n                        id: 'br-4',\n                        front: 'What command shows all branches?',\n                        back: 'git branch - Lists all local branches. Use git branch -a to see all branches including remote ones.'\n                    },\n                    {\n                        id: 'br-5',\n                        front: 'How do you delete a branch?',\n                        back: 'git branch -d <branch-name> - Deletes the specified branch. Use -D for force delete.'\n                    },\n                    {\n                        id: 'br-6',\n                        front: 'How do you create a new branch from a specific commit?',\n                        back: 'git branch <branch-name> <commit-hash> - Creates a new branch starting from the specified commit.'\n                    },\n                    {\n                        id: 'br-7',\n                        front: 'What command shows the relationship between branches?',\n                        back: 'git log --graph --oneline --all - Shows a graphical representation of branch relationships.'\n                    },\n                    {\n                        id: 'br-8',\n                        front: 'How do you rename a branch?',\n                        back: 'git branch -m <old-name> <new-name> - Renames a branch locally.'\n                    },\n                    {\n                        id: 'br-9',\n                        front: 'What command shows which branches are already merged into the current branch?',\n                        back: 'git branch --merged - Lists branches that have been merged into the current branch.'\n                    },\n                    {\n                        id: 'br-10',\n                        front: 'How do you create a new branch and switch to it in one command?',\n                        back: 'git checkout -b <branch-name> - Creates and switches to a new branch.'\n                    },\n                    {\n                        id: 'br-11',\n                        front: 'What command helps you track a remote branch?',\n                        back: 'git branch --set-upstream-to=origin/<branch-name> <local-branch-name>'\n                    },\n                    {\n                        id: 'br-12',\n                        front: 'How do you merge a specific commit into your current branch?',\n                        back: 'git cherry-pick <commit-hash> - Applies the changes from a specific commit to your current branch.'\n                    },\n                    {\n                        id: 'br-13',\n                        front: 'What command shows the commit history of a specific branch?',\n                        back: 'git log <branch-name> - Shows the commit history of the specified branch.'\n                    },\n                    {\n                        id: 'br-14',\n                        front: 'How do you create a new branch from a remote branch?',\n                        back: 'git checkout -b <local-branch-name> origin/<remote-branch-name>'\n                    },\n                    {\n                        id: 'br-15',\n                        front: 'What command helps you find which branch contains a specific commit?',\n                        back: 'git branch --contains <commit-hash> - Shows all branches that contain the specified commit.'\n                    },\n                    {\n                        id: 'br-16',\n                        front: 'How do you merge multiple branches at once?',\n                        back: 'git merge <branch1> <branch2> - Merges multiple branches into your current branch.'\n                    },\n                    {\n                        id: 'br-17',\n                        front: 'What command shows the differences between your current branch and another branch?',\n                        back: 'git diff <branch-name> - Shows the differences between your current branch and the specified branch.'\n                    },\n                    {\n                        id: 'br-18',\n                        front: 'How do you create a new branch from a tag?',\n                        back: 'git checkout -b <branch-name> <tag-name> - Creates a new branch from a specific tag.'\n                    },\n                    {\n                        id: 'br-19',\n                        front: 'What command helps you find which branches have been merged into the main branch?',\n                        back: 'git branch --merged main - Lists branches that have been merged into the main branch.'\n                    },\n                    {\n                        id: 'br-20',\n                        front: 'How do you create a new branch from a specific file in another branch?',\n                        back: 'git checkout <branch-name> -- <file-path> - Gets a specific file from another branch.'\n                    }\n                ]\n            },\n            {\n                id: 'github-commands',\n                title: 'GitHub Commands',\n                description: 'Working with remote repositories on GitHub',\n                cards: [\n                    {\n                        id: 'gh-1',\n                        front: 'How do you add a remote repository?',\n                        back: 'git remote add origin <repository-url> - Adds a remote repository named \"origin\" with the specified URL.'\n                    },\n                    {\n                        id: 'gh-2',\n                        front: 'What command pushes changes to GitHub?',\n                        back: 'git push origin <branch-name> - Pushes your local commits to the remote repository.'\n                    },\n                    {\n                        id: 'gh-3',\n                        front: 'How do you pull changes from GitHub?',\n                        back: 'git pull origin <branch-name> - Fetches and merges changes from the remote repository.'\n                    },\n                    {\n                        id: 'gh-4',\n                        front: 'What command clones a repository?',\n                        back: 'git clone <repository-url> - Creates a local copy of a remote repository.'\n                    },\n                    {\n                        id: 'gh-5',\n                        front: 'How do you fetch changes without merging?',\n                        back: 'git fetch origin - Downloads changes from the remote repository without merging them.'\n                    },\n                    {\n                        id: 'gh-6',\n                        front: 'How do you update your local repository with changes from the remote?',\n                        back: 'git pull --rebase origin <branch-name> - Fetches and rebases your local changes on top of remote changes.'\n                    },\n                    {\n                        id: 'gh-7',\n                        front: 'What command shows the remote repository information?',\n                        back: 'git remote -v - Shows the URLs of the remote repositories.'\n                    },\n                    {\n                        id: 'gh-8',\n                        front: 'How do you add multiple remote repositories?',\n                        back: 'git remote add <remote-name> <repository-url> - Adds a new remote with a custom name.'\n                    },\n                    {\n                        id: 'gh-9',\n                        front: 'What command helps you update the remote repository URL?',\n                        back: 'git remote set-url origin <new-url> - Updates the URL of the remote repository.'\n                    },\n                    {\n                        id: 'gh-10',\n                        front: 'How do you push a new branch to the remote repository?',\n                        back: 'git push -u origin <branch-name> - Pushes a new branch and sets up tracking.'\n                    },\n                    {\n                        id: 'gh-11',\n                        front: 'What command shows the differences between your local and remote branches?',\n                        back: 'git diff origin/<branch-name> - Shows the differences between your local and remote branch.'\n                    },\n                    {\n                        id: 'gh-12',\n                        front: 'How do you fetch changes from a specific remote?',\n                        back: 'git fetch <remote-name> - Downloads changes from the specified remote repository.'\n                    },\n                    {\n                        id: 'gh-13',\n                        front: 'What command helps you update your local repository with all remote changes?',\n                        back: 'git pull --all - Fetches and merges changes from all remote repositories.'\n                    },\n                    {\n                        id: 'gh-14',\n                        front: 'How do you push tags to the remote repository?',\n                        back: 'git push origin --tags - Pushes all tags to the remote repository.'\n                    },\n                    {\n                        id: 'gh-15',\n                        front: 'What command shows the remote branches?',\n                        back: 'git branch -r - Lists all remote branches.'\n                    },\n                    {\n                        id: 'gh-16',\n                        front: 'How do you delete a remote branch?',\n                        back: 'git push origin --delete <branch-name> - Deletes a branch on the remote repository.'\n                    },\n                    {\n                        id: 'gh-17',\n                        front: 'What command helps you update your local repository with remote changes without merging?',\n                        back: 'git fetch --prune - Removes references to deleted remote branches and updates your local repository.'\n                    },\n                    {\n                        id: 'gh-18',\n                        front: 'How do you push changes to a specific remote?',\n                        back: 'git push <remote-name> <branch-name> - Pushes changes to the specified remote repository.'\n                    },\n                    {\n                        id: 'gh-19',\n                        front: 'What command shows the commit history of a remote branch?',\n                        back: 'git log origin/<branch-name> - Shows the commit history of a remote branch.'\n                    },\n                    {\n                        id: 'gh-20',\n                        front: 'How do you update your local repository with changes from a specific remote branch?',\n                        back: 'git pull origin <remote-branch>:<local-branch> - Pulls changes from a specific remote branch to a local branch.'\n                    }\n                ]\n            },\n            {\n                id: 'git-advanced',\n                title: 'Advanced Git Commands',\n                description: 'Advanced Git operations and troubleshooting',\n                cards: [\n                    {\n                        id: 'adv-1',\n                        front: 'How do you undo the last commit?',\n                        back: 'git reset HEAD~1 - Undoes the last commit while keeping the changes staged. Add --hard to discard changes.'\n                    },\n                    {\n                        id: 'adv-2',\n                        front: 'What command shows the differences between branches?',\n                        back: 'git diff <branch1>..<branch2> - Shows the differences between two branches.'\n                    },\n                    {\n                        id: 'adv-3',\n                        front: 'How do you stash changes?',\n                        back: 'git stash - Temporarily saves your changes. Use git stash pop to apply them later.'\n                    },\n                    {\n                        id: 'adv-4',\n                        front: 'What command rebases your branch?',\n                        back: 'git rebase <base-branch> - Replays your changes on top of the specified branch.'\n                    },\n                    {\n                        id: 'adv-5',\n                        front: 'How do you resolve merge conflicts?',\n                        back: '1. Edit the conflicted files\\n2. git add the resolved files\\n3. git commit to complete the merge'\n                    },\n                    {\n                        id: 'adv-6',\n                        front: 'How do you create a new commit that combines multiple commits?',\n                        back: 'git reset --soft HEAD~n (where n is the number of commits) then git commit -m \"new message\"'\n                    },\n                    {\n                        id: 'adv-7',\n                        front: 'What command helps you find which commit introduced a bug?',\n                        back: 'git bisect start and git bisect good/bad - Uses binary search to find the commit that introduced a bug.'\n                    },\n                    {\n                        id: 'adv-8',\n                        front: 'How do you create a new commit that undoes changes from multiple commits?',\n                        back: 'git revert <commit1>..<commit2> - Creates new commits that undo the changes from a range of commits.'\n                    },\n                    {\n                        id: 'adv-9',\n                        front: 'What command helps you clean up your repository?',\n                        back: 'git gc - Runs garbage collection to optimize your repository.'\n                    },\n                    {\n                        id: 'adv-10',\n                        front: 'How do you create a new commit that combines changes from multiple branches?',\n                        back: 'git merge --no-ff <branch1> <branch2> - Creates a merge commit that combines changes from multiple branches.'\n                    },\n                    {\n                        id: 'adv-11',\n                        front: 'What command helps you find which commit introduced a specific line of code?',\n                        back: 'git blame <filename> - Shows who last modified each line of a file and when.'\n                    },\n                    {\n                        id: 'adv-12',\n                        front: 'How do you create a new commit that splits a previous commit?',\n                        back: 'git reset --soft HEAD~1 then git reset HEAD <file> then git commit -m \"first part\" then git add <file> then git commit -m \"second part\"'\n                    },\n                    {\n                        id: 'adv-13',\n                        front: 'What command helps you find which commit introduced a specific change?',\n                        back: 'git log -S \"search term\" - Searches for commits that introduced or removed the specified term.'\n                    },\n                    {\n                        id: 'adv-14',\n                        front: 'How do you create a new commit that combines changes from multiple commits?',\n                        back: 'git reset --soft HEAD~n then git commit -m \"combined commit\" - Combines multiple commits into one.'\n                    },\n                    {\n                        id: 'adv-15',\n                        front: 'What command helps you find which commit introduced a specific file?',\n                        back: 'git log --diff-filter=A -- <filename> - Shows the commit that added the specified file.'\n                    },\n                    {\n                        id: 'adv-16',\n                        front: 'How do you create a new commit that undoes changes from a specific file?',\n                        back: 'git checkout <commit-hash> -- <filename> then git commit -m \"revert file\" - Reverts a specific file to a previous state.'\n                    },\n                    {\n                        id: 'adv-17',\n                        front: 'What command helps you find which commit removed a specific file?',\n                        back: 'git log --diff-filter=D -- <filename> - Shows the commit that deleted the specified file.'\n                    },\n                    {\n                        id: 'adv-18',\n                        front: 'How do you create a new commit that combines changes from multiple files?',\n                        back: 'git add <file1> <file2> then git commit -m \"combined changes\" - Combines changes from multiple files into one commit.'\n                    },\n                    {\n                        id: 'adv-19',\n                        front: 'What command helps you find which commit modified a specific line?',\n                        back: 'git log -L <start>,<end>:<filename> - Shows the commit that modified the specified lines.'\n                    },\n                    {\n                        id: 'adv-20',\n                        front: 'How do you create a new commit that splits changes from a specific file?',\n                        back: 'git reset HEAD <file> then git add -p <file> then git commit -m \"first part\" then git add <file> then git commit -m \"second part\"'\n                    }\n                ]\n            }\n        ],\n        quiz: {\n            questions: [\n                {\n                    id: 'q1',\n                    question: 'Which command is used to initialize a new Git repository?',\n                    options: [\n                        'git start',\n                        'git init',\n                        'git new',\n                        'git create'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q2',\n                    question: 'What is the correct command to create and switch to a new branch?',\n                    options: [\n                        'git branch new-branch',\n                        'git checkout new-branch',\n                        'git checkout -b new-branch',\n                        'git create-branch new-branch'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q3',\n                    question: 'How do you push changes to a remote repository?',\n                    options: [\n                        'git send origin main',\n                        'git push origin main',\n                        'git upload origin main',\n                        'git submit origin main'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q4',\n                    question: 'What command is used to temporarily save changes without committing?',\n                    options: [\n                        'git save',\n                        'git store',\n                        'git stash',\n                        'git cache'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q5',\n                    question: 'Which command shows the differences between your working directory and the staging area?',\n                    options: [\n                        'git show',\n                        'git diff',\n                        'git compare',\n                        'git status'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q6',\n                    question: 'What command shows the differences between staged changes and the last commit?',\n                    options: [\n                        'git diff',\n                        'git diff --staged',\n                        'git show',\n                        'git status'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q7',\n                    question: 'How do you create a new branch from a specific commit?',\n                    options: [\n                        'git branch <branch-name>',\n                        'git branch <branch-name> <commit-hash>',\n                        'git checkout <commit-hash>',\n                        'git create-branch <branch-name> <commit-hash>'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q8',\n                    question: 'What command helps you find which commit introduced a bug?',\n                    options: [\n                        'git find-bug',\n                        'git debug',\n                        'git bisect',\n                        'git search-bug'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q9',\n                    question: 'How do you update your local repository with changes from all remotes?',\n                    options: [\n                        'git pull --all',\n                        'git fetch --all',\n                        'git update --all',\n                        'git sync --all'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q10',\n                    question: 'What command shows the commit history in a graphical format?',\n                    options: [\n                        'git show-graph',\n                        'git log --graph',\n                        'git history --graph',\n                        'git view-graph'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q11',\n                    question: 'How do you stage specific parts of a file?',\n                    options: [\n                        'git add -p',\n                        'git stage -p',\n                        'git add --partial',\n                        'git stage --partial'\n                    ],\n                    correctAnswer: 0\n                },\n                {\n                    id: 'q12',\n                    question: 'What command helps you find which commit introduced a specific line of code?',\n                    options: [\n                        'git find-line',\n                        'git blame',\n                        'git search-line',\n                        'git show-line'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q13',\n                    question: 'How do you push a new branch to the remote repository?',\n                    options: [\n                        'git push -u origin <branch-name>',\n                        'git push origin <branch-name>',\n                        'git push --new origin <branch-name>',\n                        'git push --branch origin <branch-name>'\n                    ],\n                    correctAnswer: 0\n                },\n                {\n                    id: 'q14',\n                    question: 'What command shows the relationship between branches?',\n                    options: [\n                        'git show-branches',\n                        'git branch-relations',\n                        'git log --graph',\n                        'git view-branches'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q15',\n                    question: 'How do you create a new commit that undoes changes from multiple commits?',\n                    options: [\n                        'git undo <commit1>..<commit2>',\n                        'git revert <commit1>..<commit2>',\n                        'git remove <commit1>..<commit2>',\n                        'git delete <commit1>..<commit2>'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q16',\n                    question: 'What command helps you clean up your repository?',\n                    options: [\n                        'git clean',\n                        'git optimize',\n                        'git gc',\n                        'git maintenance'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q17',\n                    question: 'How do you update the remote repository URL?',\n                    options: [\n                        'git remote update origin <new-url>',\n                        'git remote set-url origin <new-url>',\n                        'git remote change origin <new-url>',\n                        'git remote modify origin <new-url>'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q18',\n                    question: 'What command shows the differences between your local and remote branches?',\n                    options: [\n                        'git diff origin/<branch-name>',\n                        'git compare origin/<branch-name>',\n                        'git show-diff origin/<branch-name>',\n                        'git view-diff origin/<branch-name>'\n                    ],\n                    correctAnswer: 0\n                },\n                {\n                    id: 'q19',\n                    question: 'How do you create a new commit that combines changes from multiple files?',\n                    options: [\n                        'git commit --combine <file1> <file2>',\n                        'git add <file1> <file2> && git commit',\n                        'git merge-files <file1> <file2>',\n                        'git combine <file1> <file2>'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q20',\n                    question: 'What command helps you find which commit introduced a specific change in all files?',\n                    options: [\n                        'git log -p | grep \"search term\"',\n                        'git search-all \"search term\"',\n                        'git find-all \"search term\"',\n                        'git show-all \"search term\"'\n                    ],\n                    correctAnswer: 0\n                }\n            ]\n        }\n    }\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/data/learningPaths.ts\n"));

/***/ })

});