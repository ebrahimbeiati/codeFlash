"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/learning/[pathId]/page",{

/***/ "(app-pages-browser)/./src/lib/data/learningPaths.ts":
/*!***************************************!*\
  !*** ./src/lib/data/learningPaths.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   learningPaths: () => (/* binding */ learningPaths)\n/* harmony export */ });\nconst learningPaths = [\n    {\n        id: 'intro-to-digital',\n        title: 'Introduction to Digital',\n        description: 'Master the fundamentals of digital technology and computer basics',\n        level: 'beginner',\n        sets: [\n            {\n                id: 'computer-basics',\n                title: 'Computer Basics',\n                description: 'Essential knowledge about computers and digital systems',\n                cards: [\n                    {\n                        id: 'cb-1',\n                        front: 'What is a CPU?',\n                        back: 'CPU (Central Processing Unit) is the primary component of a computer that processes instructions and performs calculations. It\\'s often called the \"brain\" of the computer.'\n                    },\n                    {\n                        id: 'cb-2',\n                        front: 'What is RAM?',\n                        back: 'RAM (Random Access Memory) is temporary storage that holds data and instructions for the CPU to process. It\\'s volatile memory, meaning it loses its contents when power is turned off.'\n                    },\n                    {\n                        id: 'cb-3',\n                        front: 'What is the difference between hardware and software?',\n                        back: 'Hardware refers to physical components of a computer (CPU, RAM, hard drive), while software refers to programs and applications that run on the hardware.'\n                    },\n                    {\n                        id: 'cb-4',\n                        front: 'What is an operating system?',\n                        back: 'An operating system (OS) is software that manages computer hardware and software resources, providing common services for computer programs.'\n                    },\n                    {\n                        id: 'cb-5',\n                        front: 'What is a motherboard?',\n                        back: 'The motherboard is the main circuit board of a computer that connects all components together, including CPU, RAM, storage, and other peripherals.'\n                    },\n                    {\n                        id: 'cb-6',\n                        front: 'What is a GPU?',\n                        back: 'GPU (Graphics Processing Unit) is a specialized processor designed to handle graphics and image processing tasks. It\\'s essential for gaming and visual applications.'\n                    },\n                    {\n                        id: 'cb-7',\n                        front: 'What is a hard drive?',\n                        back: 'A hard drive is a non-volatile storage device that permanently stores and retrieves data. It can be mechanical (HDD) or solid-state (SSD).'\n                    },\n                    {\n                        id: 'cb-8',\n                        front: 'What is a network interface card (NIC)?',\n                        back: 'A NIC is a hardware component that allows computers to connect to a network. It can be wired (Ethernet) or wireless (Wi-Fi).'\n                    },\n                    {\n                        id: 'cb-9',\n                        front: 'What is a power supply unit (PSU)?',\n                        back: 'A PSU converts electrical power from an outlet into usable power for the computer\\'s components. It provides different voltage levels for various parts.'\n                    },\n                    {\n                        id: 'cb-10',\n                        front: 'What is a BIOS?',\n                        back: 'BIOS (Basic Input/Output System) is firmware that initializes hardware during the boot process and provides runtime services for operating systems.'\n                    },\n                    {\n                        id: 'cb-11',\n                        front: 'What is a port?',\n                        back: 'A port is a physical or virtual connection point that allows data to be transferred between devices. Examples include USB, HDMI, and network ports.'\n                    },\n                    {\n                        id: 'cb-12',\n                        front: 'What is a peripheral device?',\n                        back: 'A peripheral is an external device that connects to a computer to provide input or output functionality, such as keyboards, mice, and printers.'\n                    },\n                    {\n                        id: 'cb-13',\n                        front: 'What is a driver?',\n                        back: 'A driver is software that allows the operating system to communicate with hardware devices. It translates OS commands into device-specific instructions.'\n                    },\n                    {\n                        id: 'cb-14',\n                        front: 'What is a cache?',\n                        back: 'Cache is a small, fast memory that stores frequently accessed data to improve performance. It exists at multiple levels in a computer system.'\n                    },\n                    {\n                        id: 'cb-15',\n                        front: 'What is a bus?',\n                        back: 'A bus is a communication system that transfers data between components inside a computer or between computers. It can be parallel or serial.'\n                    },\n                    {\n                        id: 'cb-16',\n                        front: 'What is a chipset?',\n                        back: 'A chipset is a set of electronic components that manages data flow between the processor, memory, and peripherals. It\\'s part of the motherboard.'\n                    },\n                    {\n                        id: 'cb-17',\n                        front: 'What is a heat sink?',\n                        back: 'A heat sink is a passive cooling device that absorbs and dissipates heat from electronic components, typically the CPU or GPU.'\n                    },\n                    {\n                        id: 'cb-18',\n                        front: 'What is a fan?',\n                        back: 'A fan is an active cooling device that moves air to cool computer components. It helps prevent overheating and maintains optimal performance.'\n                    },\n                    {\n                        id: 'cb-19',\n                        front: 'What is a battery?',\n                        back: 'A battery provides power to portable devices when not connected to an electrical outlet. It stores electrical energy chemically and converts it to electrical power.'\n                    },\n                    {\n                        id: 'cb-20',\n                        front: 'What is a display?',\n                        back: 'A display is an output device that shows visual information. Common types include LCD, LED, and OLED screens, measured in pixels and refresh rates.'\n                    }\n                ]\n            },\n            {\n                id: 'digital-concepts',\n                title: 'Digital Concepts',\n                description: 'Understanding digital data and binary systems',\n                cards: [\n                    {\n                        id: 'dc-1',\n                        front: 'What is binary?',\n                        back: 'Binary is a number system that uses only two digits: 0 and 1. It\\'s the fundamental language of computers, where each digit is called a bit.'\n                    },\n                    {\n                        id: 'dc-2',\n                        front: 'What is a byte?',\n                        back: 'A byte is a unit of digital information that consists of 8 bits. It\\'s the basic unit of storage in computer systems.'\n                    },\n                    {\n                        id: 'dc-3',\n                        front: 'What is ASCII?',\n                        back: 'ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers. It uses 7 bits to represent 128 characters.'\n                    },\n                    {\n                        id: 'dc-4',\n                        front: 'What is Unicode?',\n                        back: 'Unicode is a character encoding standard that can represent almost all characters from all writing systems in the world. It\\'s an extension of ASCII.'\n                    },\n                    {\n                        id: 'dc-5',\n                        front: 'What is the difference between analog and digital?',\n                        back: 'Analog signals are continuous and can have any value, while digital signals are discrete and can only have specific values (usually 0 and 1).'\n                    },\n                    {\n                        id: 'dc-6',\n                        front: 'What is a bit?',\n                        back: 'A bit (binary digit) is the smallest unit of data in computing, representing either 0 or 1. It\\'s the fundamental building block of digital information.'\n                    },\n                    {\n                        id: 'dc-7',\n                        front: 'What is a kilobyte (KB)?',\n                        back: 'A kilobyte is 1024 bytes (2^10 bytes). It\\'s commonly used to measure small amounts of data storage.'\n                    },\n                    {\n                        id: 'dc-8',\n                        front: 'What is a megabyte (MB)?',\n                        back: 'A megabyte is 1024 kilobytes (2^20 bytes). It\\'s used to measure medium-sized files and storage capacity.'\n                    },\n                    {\n                        id: 'dc-9',\n                        front: 'What is a gigabyte (GB)?',\n                        back: 'A gigabyte is 1024 megabytes (2^30 bytes). It\\'s used to measure large files and storage devices.'\n                    },\n                    {\n                        id: 'dc-10',\n                        front: 'What is a terabyte (TB)?',\n                        back: 'A terabyte is 1024 gigabytes (2^40 bytes). It\\'s used to measure very large storage capacities.'\n                    },\n                    {\n                        id: 'dc-11',\n                        front: 'What is hexadecimal?',\n                        back: 'Hexadecimal is a base-16 number system using digits 0-9 and letters A-F. It\\'s commonly used in computing to represent binary data more compactly.'\n                    },\n                    {\n                        id: 'dc-12',\n                        front: 'What is a pixel?',\n                        back: 'A pixel (picture element) is the smallest unit of a digital image. It\\'s a single point in a raster image, containing color information.'\n                    },\n                    {\n                        id: 'dc-13',\n                        front: 'What is resolution?',\n                        back: 'Resolution is the number of pixels in a display or image, typically expressed as width × height (e.g., 1920×1080).'\n                    },\n                    {\n                        id: 'dc-14',\n                        front: 'What is a color depth?',\n                        back: 'Color depth is the number of bits used to represent the color of a single pixel. Common depths are 8-bit (256 colors) and 24-bit (16.7 million colors).'\n                    },\n                    {\n                        id: 'dc-15',\n                        front: 'What is a file format?',\n                        back: 'A file format is a standard way of encoding information for storage in a computer file. Examples include JPEG, PNG, MP3, and PDF.'\n                    },\n                    {\n                        id: 'dc-16',\n                        front: 'What is compression?',\n                        back: 'Compression is the process of reducing the size of data files by encoding information more efficiently. It can be lossless or lossy.'\n                    },\n                    {\n                        id: 'dc-17',\n                        front: 'What is a protocol?',\n                        back: 'A protocol is a set of rules that define how data is transmitted and received over a network. Examples include HTTP, FTP, and TCP/IP.'\n                    },\n                    {\n                        id: 'dc-18',\n                        front: 'What is bandwidth?',\n                        back: 'Bandwidth is the maximum rate of data transfer across a network or communication channel, typically measured in bits per second (bps).'\n                    },\n                    {\n                        id: 'dc-19',\n                        front: 'What is latency?',\n                        back: 'Latency is the time delay between sending and receiving data. It\\'s typically measured in milliseconds and affects real-time applications.'\n                    },\n                    {\n                        id: 'dc-20',\n                        front: 'What is encryption?',\n                        back: 'Encryption is the process of encoding information to make it secure and unreadable to unauthorized parties. It uses algorithms and keys to protect data.'\n                    }\n                ]\n            }\n        ],\n        quiz: {\n            questions: [\n                {\n                    id: 'q1',\n                    question: 'Which component is often called the \"brain\" of the computer?',\n                    options: [\n                        'RAM',\n                        'CPU',\n                        'Hard Drive',\n                        'Motherboard'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q2',\n                    question: 'What is the main difference between RAM and ROM?',\n                    options: [\n                        'RAM is faster than ROM',\n                        'RAM is volatile, ROM is non-volatile',\n                        'RAM is cheaper than ROM',\n                        'RAM is newer technology than ROM'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q3',\n                    question: 'How many bits are in a byte?',\n                    options: [\n                        '4',\n                        '8',\n                        '16',\n                        '32'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q4',\n                    question: 'What is the purpose of an operating system?',\n                    options: [\n                        'To make the computer look pretty',\n                        'To manage hardware and software resources',\n                        'To connect to the internet',\n                        'To store data permanently'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q5',\n                    question: 'Which of the following is NOT a binary number?',\n                    options: [\n                        '1010',\n                        '1111',\n                        '1234',\n                        '1001'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q6',\n                    question: 'What is the main function of a GPU?',\n                    options: [\n                        'Process text documents',\n                        'Handle graphics and image processing',\n                        'Store data permanently',\n                        'Connect to the internet'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q7',\n                    question: 'What is the difference between HDD and SSD?',\n                    options: [\n                        'HDD is faster than SSD',\n                        'SSD has no moving parts, HDD does',\n                        'HDD is newer technology than SSD',\n                        'SSD is always larger than HDD'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q8',\n                    question: 'What is the purpose of a network interface card?',\n                    options: [\n                        'Process graphics',\n                        'Store data',\n                        'Connect to a network',\n                        'Power the computer'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q9',\n                    question: 'What is the main function of a power supply unit?',\n                    options: [\n                        'Process data',\n                        'Store information',\n                        'Convert electrical power',\n                        'Display images'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q10',\n                    question: 'What is the purpose of a BIOS?',\n                    options: [\n                        'Display graphics',\n                        'Store user data',\n                        'Initialize hardware during boot',\n                        'Connect to the internet'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q11',\n                    question: 'What is a peripheral device?',\n                    options: [\n                        'The main processor',\n                        'An external device that provides input/output',\n                        'The operating system',\n                        'The power supply'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q12',\n                    question: 'What is the purpose of a driver?',\n                    options: [\n                        'Power the computer',\n                        'Store data',\n                        'Allow OS to communicate with hardware',\n                        'Display graphics'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q13',\n                    question: 'What is the main purpose of a cache?',\n                    options: [\n                        'Store permanent data',\n                        'Improve performance with frequently accessed data',\n                        'Power the computer',\n                        'Display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q14',\n                    question: 'What is the function of a heat sink?',\n                    options: [\n                        'Store data',\n                        'Process information',\n                        'Cool electronic components',\n                        'Display images'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q15',\n                    question: 'What is the purpose of a fan in a computer?',\n                    options: [\n                        'Store data',\n                        'Process information',\n                        'Cool components',\n                        'Display graphics'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q16',\n                    question: 'What is the main difference between analog and digital signals?',\n                    options: [\n                        'Digital signals are always faster',\n                        'Analog signals are always more accurate',\n                        'Analog signals are continuous, digital are discrete',\n                        'Digital signals are always more expensive'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q17',\n                    question: 'What is the purpose of Unicode?',\n                    options: [\n                        'Store binary data',\n                        'Represent characters from all writing systems',\n                        'Process graphics',\n                        'Connect to networks'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q18',\n                    question: 'What is the main purpose of compression?',\n                    options: [\n                        'Improve image quality',\n                        'Reduce file size',\n                        'Increase processing speed',\n                        'Enhance security'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q19',\n                    question: 'What is the purpose of a protocol?',\n                    options: [\n                        'Store data',\n                        'Define rules for data transmission',\n                        'Process graphics',\n                        'Power the computer'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q20',\n                    question: 'What is the main purpose of encryption?',\n                    options: [\n                        'Improve performance',\n                        'Reduce file size',\n                        'Make data secure and unreadable',\n                        'Enhance graphics'\n                    ],\n                    correctAnswer: 2\n                }\n            ]\n        }\n    },\n    {\n        id: 'intro-to-programming',\n        title: 'Introduction to Programming',\n        description: 'Learn the basics of programming and computational thinking',\n        level: 'beginner',\n        sets: [\n            {\n                id: 'programming-basics',\n                title: 'Programming Fundamentals',\n                description: 'Core concepts of programming and problem-solving',\n                cards: [\n                    {\n                        id: 'pb-1',\n                        front: 'What is a variable?',\n                        back: 'A variable is a named container that stores data in a program. It can hold different types of values (numbers, text, etc.) and its value can change during program execution.'\n                    },\n                    {\n                        id: 'pb-2',\n                        front: 'What is a function?',\n                        back: 'A function is a reusable block of code that performs a specific task. It can take inputs (parameters) and return outputs.'\n                    },\n                    {\n                        id: 'pb-3',\n                        front: 'What is a loop?',\n                        back: 'A loop is a programming structure that repeats a block of code multiple times. Common types include for loops and while loops.'\n                    },\n                    {\n                        id: 'pb-4',\n                        front: 'What is an algorithm?',\n                        back: 'An algorithm is a step-by-step procedure for solving a problem or accomplishing a task. It\\'s like a recipe for a computer to follow.'\n                    },\n                    {\n                        id: 'pb-5',\n                        front: 'What is debugging?',\n                        back: 'Debugging is the process of finding and fixing errors (bugs) in a program. It involves identifying the cause of the error and making the necessary corrections.'\n                    },\n                    {\n                        id: 'pb-6',\n                        front: 'What is a conditional statement?',\n                        back: 'A conditional statement is a programming structure that executes different code blocks based on whether a condition is true or false. Examples include if-else statements.'\n                    },\n                    {\n                        id: 'pb-7',\n                        front: 'What is a comment?',\n                        back: 'A comment is text in the code that is not executed. It\\'s used to explain what the code does and make it more readable for other programmers.'\n                    },\n                    {\n                        id: 'pb-8',\n                        front: 'What is a data type?',\n                        back: 'A data type defines the kind of data a variable can hold and the operations that can be performed on it. Common types include integers, strings, and booleans.'\n                    },\n                    {\n                        id: 'pb-9',\n                        front: 'What is an operator?',\n                        back: 'An operator is a symbol that performs operations on values. Examples include arithmetic operators (+, -, *, /) and comparison operators (==, !=, >, <).'\n                    },\n                    {\n                        id: 'pb-10',\n                        front: 'What is a constant?',\n                        back: 'A constant is a variable whose value cannot be changed after it\\'s assigned. It\\'s used for values that should remain the same throughout the program.'\n                    },\n                    {\n                        id: 'pb-11',\n                        front: 'What is scope?',\n                        back: 'Scope defines where a variable can be accessed in a program. Variables can have global scope (accessible everywhere) or local scope (accessible only within a function).'\n                    },\n                    {\n                        id: 'pb-12',\n                        front: 'What is a parameter?',\n                        back: 'A parameter is a variable that is passed to a function when it\\'s called. It allows the function to work with different values each time it\\'s used.'\n                    },\n                    {\n                        id: 'pb-13',\n                        front: 'What is a return value?',\n                        back: 'A return value is the output of a function. It\\'s the result that the function sends back to the code that called it.'\n                    },\n                    {\n                        id: 'pb-14',\n                        front: 'What is an array?',\n                        back: 'An array is a data structure that stores a collection of elements, each identified by an index. Elements can be accessed directly using their index.'\n                    },\n                    {\n                        id: 'pb-15',\n                        front: 'What is a string?',\n                        back: 'A string is a sequence of characters. In programming, strings are typically used to represent text.'\n                    },\n                    {\n                        id: 'pb-16',\n                        front: 'What is a boolean?',\n                        back: 'A boolean is a data type that can have only two values: true or false. It\\'s used for logical operations and conditions.'\n                    },\n                    {\n                        id: 'pb-17',\n                        front: 'What is a list?',\n                        back: 'A list is a data structure that can store multiple items in a single variable. Unlike arrays, lists can store items of different types.'\n                    },\n                    {\n                        id: 'pb-18',\n                        front: 'What is a dictionary/map?',\n                        back: 'A dictionary (or map) is a data structure that stores key-value pairs. Each value is associated with a unique key that can be used to access it.'\n                    },\n                    {\n                        id: 'pb-19',\n                        front: 'What is a class?',\n                        back: 'A class is a blueprint for creating objects. It defines the properties and methods that objects of that class will have.'\n                    },\n                    {\n                        id: 'pb-20',\n                        front: 'What is an object?',\n                        back: 'An object is an instance of a class. It contains data (properties) and code (methods) that operate on that data.'\n                    }\n                ]\n            },\n            {\n                id: 'programming-concepts',\n                title: 'Advanced Programming Concepts',\n                description: 'Understanding complex programming concepts and patterns',\n                cards: [\n                    {\n                        id: 'pc-1',\n                        front: 'What is object-oriented programming (OOP)?',\n                        back: 'OOP is a programming paradigm that organizes code into objects that contain data and code. It emphasizes reusability and maintainability.'\n                    },\n                    {\n                        id: 'pc-2',\n                        front: 'What is inheritance?',\n                        back: 'Inheritance is a mechanism that allows a class to inherit properties and methods from another class. It promotes code reuse and establishes relationships between classes.'\n                    },\n                    {\n                        id: 'pc-3',\n                        front: 'What is polymorphism?',\n                        back: 'Polymorphism is the ability of different objects to respond to the same method call in different ways. It allows for flexible and extensible code.'\n                    },\n                    {\n                        id: 'pc-4',\n                        front: 'What is encapsulation?',\n                        back: 'Encapsulation is the bundling of data and methods that operate on that data within a single unit (class). It helps protect data from unauthorized access.'\n                    },\n                    {\n                        id: 'pc-5',\n                        front: 'What is abstraction?',\n                        back: 'Abstraction is the process of hiding complex implementation details and showing only the necessary features of an object. It helps manage complexity.'\n                    },\n                    {\n                        id: 'pc-6',\n                        front: 'What is a design pattern?',\n                        back: 'A design pattern is a reusable solution to common problems in software design. It provides a template for solving similar problems in different contexts.'\n                    },\n                    {\n                        id: 'pc-7',\n                        front: 'What is recursion?',\n                        back: 'Recursion is a programming technique where a function calls itself to solve a problem. It\\'s useful for problems that can be broken down into smaller, similar subproblems.'\n                    },\n                    {\n                        id: 'pc-8',\n                        front: 'What is a stack?',\n                        back: 'A stack is a data structure that follows the Last-In-First-Out (LIFO) principle. Elements can only be added or removed from the top of the stack.'\n                    },\n                    {\n                        id: 'pc-9',\n                        front: 'What is a queue?',\n                        back: 'A queue is a data structure that follows the First-In-First-Out (FIFO) principle. Elements are added to the end and removed from the front.'\n                    },\n                    {\n                        id: 'pc-10',\n                        front: 'What is a tree?',\n                        back: 'A tree is a hierarchical data structure with nodes connected by edges. Each node can have multiple children but only one parent (except the root).'\n                    },\n                    {\n                        id: 'pc-11',\n                        front: 'What is a graph?',\n                        back: 'A graph is a data structure consisting of nodes (vertices) connected by edges. It can represent complex relationships between objects.'\n                    },\n                    {\n                        id: 'pc-12',\n                        front: 'What is a hash table?',\n                        back: 'A hash table is a data structure that maps keys to values using a hash function. It provides fast access to data based on keys.'\n                    },\n                    {\n                        id: 'pc-13',\n                        front: 'What is a binary search?',\n                        back: 'Binary search is an efficient algorithm for finding an element in a sorted array. It repeatedly divides the search interval in half.'\n                    },\n                    {\n                        id: 'pc-14',\n                        front: 'What is a sorting algorithm?',\n                        back: 'A sorting algorithm is a method for arranging elements in a specific order. Common algorithms include bubble sort, quick sort, and merge sort.'\n                    },\n                    {\n                        id: 'pc-15',\n                        front: 'What is a linked list?',\n                        back: 'A linked list is a data structure where elements are stored in nodes, and each node points to the next node. It allows for efficient insertion and deletion.'\n                    },\n                    {\n                        id: 'pc-16',\n                        front: 'What is a binary tree?',\n                        back: 'A binary tree is a tree data structure where each node has at most two children, referred to as the left child and right child.'\n                    },\n                    {\n                        id: 'pc-17',\n                        front: 'What is a heap?',\n                        back: 'A heap is a specialized tree-based data structure that satisfies the heap property. It\\'s commonly used to implement priority queues.'\n                    },\n                    {\n                        id: 'pc-18',\n                        front: 'What is a set?',\n                        back: 'A set is a data structure that stores unique elements. It doesn\\'t allow duplicates and provides efficient operations for adding, removing, and checking membership.'\n                    },\n                    {\n                        id: 'pc-19',\n                        front: 'What is a map?',\n                        back: 'A map is a data structure that stores key-value pairs. It provides efficient lookup, insertion, and deletion operations based on keys.'\n                    },\n                    {\n                        id: 'pc-20',\n                        front: 'What is a stack overflow?',\n                        back: 'A stack overflow occurs when a program tries to use more stack space than is available, typically due to infinite recursion or very deep recursion.'\n                    }\n                ]\n            }\n        ],\n        quiz: {\n            questions: [\n                {\n                    id: 'q1',\n                    question: 'What is the purpose of a variable in programming?',\n                    options: [\n                        'To make the code look pretty',\n                        'To store and manipulate data',\n                        'To connect to the internet',\n                        'To display text on screen'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q2',\n                    question: 'Which of the following is NOT a common loop type?',\n                    options: [\n                        'for loop',\n                        'while loop',\n                        'if loop',\n                        'do-while loop'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q3',\n                    question: 'What is the main difference between an array and a list?',\n                    options: [\n                        'Arrays are faster than lists',\n                        'Lists can store different types of data, arrays cannot',\n                        'Arrays are newer than lists',\n                        'Lists are always larger than arrays'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q4',\n                    question: 'What is the purpose of a function?',\n                    options: [\n                        'To make the code longer',\n                        'To store data permanently',\n                        'To perform a specific task',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q5',\n                    question: 'What is the main purpose of debugging?',\n                    options: [\n                        'To make the code run faster',\n                        'To find and fix errors',\n                        'To add new features',\n                        'To improve graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q6',\n                    question: 'What is the purpose of a conditional statement?',\n                    options: [\n                        'To store data',\n                        'To repeat code',\n                        'To make decisions in code',\n                        'To display text'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q7',\n                    question: 'What is the main purpose of comments in code?',\n                    options: [\n                        'To make the code run faster',\n                        'To explain what the code does',\n                        'To store data',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q8',\n                    question: 'What is the purpose of a data type?',\n                    options: [\n                        'To make the code look pretty',\n                        'To define what kind of data can be stored',\n                        'To connect to the internet',\n                        'To display text'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q9',\n                    question: 'What is the main purpose of a constant?',\n                    options: [\n                        'To store changing data',\n                        'To store data that cannot be changed',\n                        'To make the code run faster',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q10',\n                    question: 'What is the purpose of scope in programming?',\n                    options: [\n                        'To make the code look pretty',\n                        'To define where variables can be accessed',\n                        'To connect to the internet',\n                        'To display text'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q11',\n                    question: 'What is the main purpose of parameters in a function?',\n                    options: [\n                        'To make the function longer',\n                        'To allow the function to work with different values',\n                        'To store data permanently',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q12',\n                    question: 'What is the purpose of a return value?',\n                    options: [\n                        'To make the function longer',\n                        'To send data back from a function',\n                        'To store data permanently',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q13',\n                    question: 'What is the main purpose of a class?',\n                    options: [\n                        'To store data',\n                        'To create objects with properties and methods',\n                        'To connect to the internet',\n                        'To display text'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q14',\n                    question: 'What is the purpose of inheritance?',\n                    options: [\n                        'To make the code longer',\n                        'To reuse code from another class',\n                        'To store data',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q15',\n                    question: 'What is the main purpose of polymorphism?',\n                    options: [\n                        'To make the code longer',\n                        'To allow different objects to respond to the same method',\n                        'To store data',\n                        'To display text'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q16',\n                    question: 'What is the purpose of encapsulation?',\n                    options: [\n                        'To make the code longer',\n                        'To protect data from unauthorized access',\n                        'To connect to the internet',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q17',\n                    question: 'What is the main purpose of abstraction?',\n                    options: [\n                        'To make the code longer',\n                        'To hide complex implementation details',\n                        'To store data',\n                        'To display text'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q18',\n                    question: 'What is the purpose of a design pattern?',\n                    options: [\n                        'To make the code longer',\n                        'To provide reusable solutions to common problems',\n                        'To store data',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q19',\n                    question: 'What is the main purpose of recursion?',\n                    options: [\n                        'To make the code longer',\n                        'To solve problems by breaking them into smaller subproblems',\n                        'To store data',\n                        'To display text'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q20',\n                    question: 'What is the purpose of a stack overflow?',\n                    options: [\n                        'To make the code longer',\n                        'To indicate that the program has used too much stack space',\n                        'To store data',\n                        'To display graphics'\n                    ],\n                    correctAnswer: 1\n                }\n            ]\n        }\n    },\n    {\n        id: 'javascript-basics',\n        title: 'JavaScript Fundamentals',\n        description: 'Master modern JavaScript programming',\n        level: 'beginner',\n        sets: [\n            {\n                id: 'js-beginner',\n                title: 'JavaScript Beginner Concepts',\n                description: 'Understanding JavaScript fundamentals and basic features',\n                cards: [\n                    {\n                        id: 'js-b1',\n                        front: 'What is JavaScript?',\n                        back: 'JavaScript is a high-level, interpreted programming language that enables interactive web pages. It is an essential part of web applications and can be used for both front-end and back-end development.'\n                    },\n                    {\n                        id: 'js-b2',\n                        front: 'What are the basic data types in JavaScript?',\n                        back: 'JavaScript has 7 primitive data types: String, Number, Boolean, Undefined, Null, Symbol, and BigInt. Objects are the only non-primitive data type.'\n                    },\n                    {\n                        id: 'js-b3',\n                        front: 'What is the difference between let, const, and var?',\n                        back: 'let and const are block-scoped, while var is function-scoped. const cannot be reassigned, while let and var can. var declarations are hoisted, while let and const are not.'\n                    },\n                    {\n                        id: 'js-b4',\n                        front: 'What is hoisting in JavaScript?',\n                        back: 'Hoisting is JavaScript\\'s behavior of moving declarations to the top of their scope. Variable declarations using var are hoisted, while let and const are not. Function declarations are also hoisted.'\n                    },\n                    {\n                        id: 'js-b5',\n                        front: 'What is the difference between == and ===?',\n                        back: '== performs type coercion before comparison, while === checks both value and type without coercion. === is generally preferred as it\\'s more predictable.'\n                    },\n                    {\n                        id: 'js-b6',\n                        front: 'What is a function?',\n                        back: 'A function is a reusable block of code that performs a specific task. Functions can take parameters and return values. They are first-class objects in JavaScript.'\n                    },\n                    {\n                        id: 'js-b7',\n                        front: 'What is an array?',\n                        back: 'An array is an ordered collection of values. Arrays can store multiple values of different types and are zero-indexed. They have built-in methods for manipulation.'\n                    },\n                    {\n                        id: 'js-b8',\n                        front: 'What is an object?',\n                        back: 'An object is a collection of key-value pairs. Objects can store multiple values as properties and methods. They are used to represent real-world entities.'\n                    },\n                    {\n                        id: 'js-b9',\n                        front: 'What is a string?',\n                        back: 'A string is a sequence of characters. Strings are immutable and have various methods for manipulation. They can be created using single or double quotes.'\n                    },\n                    {\n                        id: 'js-b10',\n                        front: 'What is a number?',\n                        back: 'Numbers in JavaScript are 64-bit floating point values. They can be integers or decimals. JavaScript also has special number values like Infinity and NaN.'\n                    },\n                    {\n                        id: 'js-b11',\n                        front: 'What is a boolean?',\n                        back: 'A boolean is a logical data type that can have only two values: true or false. Booleans are often used in conditional statements and loops.'\n                    },\n                    {\n                        id: 'js-b12',\n                        front: 'What is null?',\n                        back: 'null is a special value that represents the intentional absence of any object value. It is a primitive value and is often used to indicate that a variable has no value.'\n                    },\n                    {\n                        id: 'js-b13',\n                        front: 'What is undefined?',\n                        back: 'undefined is a special value that represents an uninitialized variable. It is a primitive value and is the default value of variables that have been declared but not assigned.'\n                    },\n                    {\n                        id: 'js-b14',\n                        front: 'What is a conditional statement?',\n                        back: 'A conditional statement is a block of code that executes only if a specified condition is true. JavaScript has if, else if, else, and switch statements.'\n                    },\n                    {\n                        id: 'js-b15',\n                        front: 'What is a loop?',\n                        back: 'A loop is a block of code that executes repeatedly until a specified condition is met. JavaScript has for, while, do...while, and for...of loops.'\n                    },\n                    {\n                        id: 'js-b16',\n                        front: 'What is the difference between for and while loops?',\n                        back: 'for loops are used when you know how many times you want to loop. while loops are used when you don\\'t know how many times you need to loop.'\n                    },\n                    {\n                        id: 'js-b17',\n                        front: 'What is the difference between break and continue?',\n                        back: 'break exits a loop completely, while continue skips the current iteration and continues with the next one.'\n                    },\n                    {\n                        id: 'js-b18',\n                        front: 'What is the difference between function declaration and function expression?',\n                        back: 'Function declarations are hoisted and can be called before they are defined. Function expressions are not hoisted and must be defined before they are called.'\n                    },\n                    {\n                        id: 'js-b19',\n                        front: 'What is the difference between parameters and arguments?',\n                        back: 'Parameters are the variables listed in the function definition. Arguments are the actual values passed to the function when it is called.'\n                    },\n                    {\n                        id: 'js-b20',\n                        front: 'What is the return statement?',\n                        back: 'The return statement ends function execution and specifies a value to be returned to the function caller.'\n                    },\n                    {\n                        id: 'js-b21',\n                        front: 'What is the difference between local and global variables?',\n                        back: 'Local variables are declared inside a function and can only be accessed within that function. Global variables are declared outside any function and can be accessed anywhere.'\n                    },\n                    {\n                        id: 'js-b22',\n                        front: 'What is the difference between let and const?',\n                        back: 'let allows you to reassign values, while const does not. Both are block-scoped and not hoisted.'\n                    },\n                    {\n                        id: 'js-b23',\n                        front: 'What is the difference between null and undefined?',\n                        back: 'null is an explicit assignment of no value, while undefined means a variable has been declared but not assigned a value.'\n                    },\n                    {\n                        id: 'js-b24',\n                        front: 'What is the difference between == and ===?',\n                        back: '== performs type coercion before comparison, while === checks both value and type without coercion.'\n                    },\n                    {\n                        id: 'js-b25',\n                        front: 'What is the difference between != and !==?',\n                        back: '!= performs type coercion before comparison, while !== checks both value and type without coercion.'\n                    },\n                    {\n                        id: 'js-b26',\n                        front: 'What is the difference between && and ||?',\n                        back: '&& returns true if both operands are true, while || returns true if either operand is true.'\n                    },\n                    {\n                        id: 'js-b27',\n                        front: 'What is the difference between ! and !!?',\n                        back: '! converts a value to its boolean opposite, while !! converts a value to its boolean equivalent.'\n                    },\n                    {\n                        id: 'js-b28',\n                        front: 'What is the difference between ++ and --?',\n                        back: '++ increments a value by 1, while -- decrements a value by 1.'\n                    },\n                    {\n                        id: 'js-b29',\n                        front: 'What is the difference between += and -=?',\n                        back: '+= adds a value to a variable, while -= subtracts a value from a variable.'\n                    },\n                    {\n                        id: 'js-b30',\n                        front: 'What is the difference between *= and /=?',\n                        back: '*= multiplies a variable by a value, while /= divides a variable by a value.'\n                    }\n                ]\n            },\n            {\n                id: 'js-intermediate',\n                title: 'JavaScript Intermediate Concepts',\n                description: 'Understanding advanced JavaScript features and patterns',\n                cards: [\n                    {\n                        id: 'js-i1',\n                        front: 'What is closure in JavaScript?',\n                        back: 'A closure is a function that has access to variables from its outer lexical scope, even after the outer function has returned. It maintains access to its scope chain.'\n                    },\n                    {\n                        id: 'js-i2',\n                        front: 'What is the \"this\" keyword?',\n                        back: 'The this keyword refers to the object that is currently executing the code. Its value depends on how a function is called: global context, object method, constructor, or event handler.'\n                    },\n                    {\n                        id: 'js-i3',\n                        front: 'What is the difference between call(), apply(), and bind()?',\n                        back: 'All three methods are used to set the this value. call() invokes the function with given this and arguments. apply() is similar but takes arguments as an array. bind() returns a new function with fixed this.'\n                    },\n                    {\n                        id: 'js-i4',\n                        front: 'What is a promise?',\n                        back: 'A promise is an object representing the eventual completion or failure of an asynchronous operation. It has three states: pending, fulfilled, or rejected.'\n                    },\n                    {\n                        id: 'js-i5',\n                        front: 'What is async/await?',\n                        back: 'async/await is a syntax for handling promises. async functions return promises, and await pauses execution until the promise resolves. It makes asynchronous code look synchronous.'\n                    },\n                    {\n                        id: 'js-i6',\n                        front: 'What is the event loop?',\n                        back: 'The event loop is a mechanism that allows JavaScript to handle asynchronous operations. It continuously checks the call stack and message queue, executing callbacks when the stack is empty.'\n                    },\n                    {\n                        id: 'js-i7',\n                        front: 'What is the difference between synchronous and asynchronous code?',\n                        back: 'Synchronous code executes in sequence, blocking until each operation completes. Asynchronous code allows other operations to continue while waiting for an operation to complete.'\n                    },\n                    {\n                        id: 'js-i8',\n                        front: 'What is a callback function?',\n                        back: 'A callback function is a function passed as an argument to another function, to be executed after the main function has finished its execution.'\n                    },\n                    {\n                        id: 'js-i9',\n                        front: 'What is the spread operator?',\n                        back: 'The spread operator (...) allows an iterable to be expanded in places where multiple arguments or elements are expected. It can be used with arrays, objects, and function arguments.'\n                    },\n                    {\n                        id: 'js-i10',\n                        front: 'What is destructuring?',\n                        back: 'Destructuring is a JavaScript expression that allows you to extract values from arrays or properties from objects into distinct variables.'\n                    },\n                    {\n                        id: 'js-i11',\n                        front: 'What is the difference between map(), filter(), and reduce()?',\n                        back: 'map() transforms each element in an array. filter() creates a new array with elements that pass a test. reduce() reduces an array to a single value by executing a reducer function.'\n                    },\n                    {\n                        id: 'js-i12',\n                        front: 'What is the difference between forEach() and map()?',\n                        back: 'forEach() executes a function for each element but doesn\\'t return anything. map() creates a new array with the results of calling a function for every array element.'\n                    },\n                    {\n                        id: 'js-i13',\n                        front: 'What is the difference between slice() and splice()?',\n                        back: 'slice() returns a shallow copy of a portion of an array without modifying the original. splice() changes the contents of an array by removing or replacing elements and/or adding new elements.'\n                    },\n                    {\n                        id: 'js-i14',\n                        front: 'What is the difference between Object.freeze() and Object.seal()?',\n                        back: 'Object.freeze() makes an object immutable, preventing any changes to its properties. Object.seal() prevents adding or removing properties but allows modifying existing ones.'\n                    },\n                    {\n                        id: 'js-i15',\n                        front: 'What is the difference between Object.keys() and Object.entries()?',\n                        back: 'Object.keys() returns an array of a given object\\'s own enumerable property names. Object.entries() returns an array of a given object\\'s own enumerable string-keyed property [key, value] pairs.'\n                    },\n                    {\n                        id: 'js-i16',\n                        front: 'What is the difference between Object.assign() and the spread operator?',\n                        back: 'Both can be used to copy objects, but Object.assign() modifies the target object, while the spread operator creates a new object. The spread operator is generally preferred for its immutability.'\n                    },\n                    {\n                        id: 'js-i17',\n                        front: 'What is the difference between Array.from() and the spread operator?',\n                        back: 'Array.from() can convert array-like objects to arrays and accepts a mapping function. The spread operator can only spread iterable objects into arrays.'\n                    },\n                    {\n                        id: 'js-i18',\n                        front: 'What is the difference between Array.isArray() and instanceof Array?',\n                        back: 'Array.isArray() is more reliable as it works across different frames/windows. instanceof Array can fail when checking arrays from different contexts.'\n                    },\n                    {\n                        id: 'js-i19',\n                        front: 'What is the difference between String.prototype.slice() and String.prototype.substring()?',\n                        back: 'Both extract parts of a string, but slice() can use negative indices and doesn\\'t swap parameters if start > end. substring() swaps parameters if start > end and treats negative indices as 0.'\n                    },\n                    {\n                        id: 'js-i20',\n                        front: 'What is the difference between String.prototype.replace() and String.prototype.replaceAll()?',\n                        back: 'replace() replaces only the first occurrence of a pattern. replaceAll() replaces all occurrences of a pattern in a string.'\n                    }\n                ]\n            },\n            {\n                id: 'js-advanced',\n                title: 'JavaScript Advanced Concepts',\n                description: 'Understanding complex JavaScript patterns and best practices',\n                cards: [\n                    {\n                        id: 'js-a1',\n                        front: 'What is the prototype chain?',\n                        back: 'The prototype chain is how JavaScript implements inheritance. Each object has a prototype object, and objects inherit properties and methods from their prototype chain.'\n                    },\n                    {\n                        id: 'js-a2',\n                        front: 'What is the difference between classical and prototypal inheritance?',\n                        back: 'Classical inheritance uses classes and extends them, while prototypal inheritance uses objects and delegates to their prototypes. JavaScript uses prototypal inheritance.'\n                    },\n                    {\n                        id: 'js-a3',\n                        front: 'What is the difference between Object.create() and new?',\n                        back: 'Object.create() creates a new object with the specified prototype object. new creates an instance of a constructor function, which sets up the prototype chain.'\n                    },\n                    {\n                        id: 'js-a4',\n                        front: 'What is the difference between Object.getPrototypeOf() and Object.setPrototypeOf()?',\n                        back: 'Object.getPrototypeOf() returns the prototype of an object. Object.setPrototypeOf() sets the prototype of an object to another object or null.'\n                    },\n                    {\n                        id: 'js-a5',\n                        front: 'What is the difference between Object.defineProperty() and Object.defineProperties()?',\n                        back: 'Object.defineProperty() defines a new property or modifies an existing property on an object. Object.defineProperties() defines multiple properties on an object.'\n                    },\n                    {\n                        id: 'js-a6',\n                        front: 'What is the difference between Object.getOwnPropertyDescriptor() and Object.getOwnPropertyDescriptors()?',\n                        back: 'Object.getOwnPropertyDescriptor() returns a property descriptor for an own property. Object.getOwnPropertyDescriptors() returns all own property descriptors of an object.'\n                    },\n                    {\n                        id: 'js-a7',\n                        front: 'What is the difference between Object.preventExtensions() and Object.seal()?',\n                        back: 'Object.preventExtensions() prevents new properties from being added to an object. Object.seal() prevents new properties from being added and existing properties from being deleted.'\n                    },\n                    {\n                        id: 'js-a8',\n                        front: 'What is the difference between Object.freeze() and Object.seal()?',\n                        back: 'Object.freeze() makes an object immutable, preventing any changes to its properties. Object.seal() prevents adding or removing properties but allows modifying existing ones.'\n                    },\n                    {\n                        id: 'js-a9',\n                        front: 'What is the difference between Object.is() and ===?',\n                        back: 'Object.is() is similar to === but handles special cases like NaN and -0 differently. Object.is(NaN, NaN) is true, while NaN === NaN is false.'\n                    },\n                    {\n                        id: 'js-a10',\n                        front: 'What is the difference between Object.keys() and Object.getOwnPropertyNames()?',\n                        back: 'Object.keys() returns an array of a given object\\'s own enumerable property names. Object.getOwnPropertyNames() returns an array of all own property names, including non-enumerable ones.'\n                    },\n                    {\n                        id: 'js-a11',\n                        front: 'What is the difference between Object.entries() and Object.fromEntries()?',\n                        back: 'Object.entries() converts an object to an array of [key, value] pairs. Object.fromEntries() converts an array of [key, value] pairs back to an object.'\n                    },\n                    {\n                        id: 'js-a12',\n                        front: 'What is the difference between Object.values() and Object.keys()?',\n                        back: 'Object.values() returns an array of a given object\\'s own enumerable property values. Object.keys() returns an array of a given object\\'s own enumerable property names.'\n                    },\n                    {\n                        id: 'js-a13',\n                        front: 'What is the difference between Object.getOwnPropertySymbols() and Object.getOwnPropertyNames()?',\n                        back: 'Object.getOwnPropertySymbols() returns an array of all symbol properties found directly on an object. Object.getOwnPropertyNames() returns an array of all string properties found directly on an object.'\n                    },\n                    {\n                        id: 'js-a14',\n                        front: 'What is the difference between Object.isExtensible() and Object.isSealed()?',\n                        back: 'Object.isExtensible() determines if an object is extensible. Object.isSealed() determines if an object is sealed.'\n                    },\n                    {\n                        id: 'js-a15',\n                        front: 'What is the difference between Object.isFrozen() and Object.isSealed()?',\n                        back: 'Object.isFrozen() determines if an object is frozen. Object.isSealed() determines if an object is sealed.'\n                    },\n                    {\n                        id: 'js-a16',\n                        front: 'What is the difference between Object.getOwnPropertyDescriptor() and Object.getOwnPropertyDescriptors()?',\n                        back: 'Object.getOwnPropertyDescriptor() returns a property descriptor for an own property. Object.getOwnPropertyDescriptors() returns all own property descriptors of an object.'\n                    },\n                    {\n                        id: 'js-a17',\n                        front: 'What is the difference between Object.defineProperty() and Object.defineProperties()?',\n                        back: 'Object.defineProperty() defines a new property or modifies an existing property on an object. Object.defineProperties() defines multiple properties on an object.'\n                    },\n                    {\n                        id: 'js-a18',\n                        front: 'What is the difference between Object.getPrototypeOf() and Object.setPrototypeOf()?',\n                        back: 'Object.getPrototypeOf() returns the prototype of an object. Object.setPrototypeOf() sets the prototype of an object to another object or null.'\n                    },\n                    {\n                        id: 'js-a19',\n                        front: 'What is the difference between Object.create() and new?',\n                        back: 'Object.create() creates a new object with the specified prototype object. new creates an instance of a constructor function, which sets up the prototype chain.'\n                    },\n                    {\n                        id: 'js-a20',\n                        front: 'What is the difference between classical and prototypal inheritance?',\n                        back: 'Classical inheritance uses classes and extends them, while prototypal inheritance uses objects and delegates to their prototypes. JavaScript uses prototypal inheritance.'\n                    }\n                ]\n            }\n        ],\n        quiz: {\n            questions: [\n                {\n                    id: 'js-q1',\n                    question: 'What is JavaScript?',\n                    options: [\n                        'A markup language',\n                        'A programming language',\n                        'A styling language',\n                        'A database language'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q2',\n                    question: 'What are the basic data types in JavaScript?',\n                    options: [\n                        'String, Number, Boolean',\n                        'String, Number, Boolean, Undefined, Null, Symbol, BigInt',\n                        'String, Number, Boolean, Array, Object',\n                        'String, Number, Boolean, Function'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q3',\n                    question: 'What is the difference between let, const, and var?',\n                    options: [\n                        'They are all the same',\n                        'let and const are block-scoped, var is function-scoped',\n                        'let is for numbers, const is for strings, var is for booleans',\n                        'let is for variables, const is for constants, var is for arrays'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q4',\n                    question: 'What is hoisting in JavaScript?',\n                    options: [\n                        'Moving variables to the bottom of their scope',\n                        'Moving declarations to the top of their scope',\n                        'Moving functions to the bottom of their scope',\n                        'Moving objects to the top of their scope'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q5',\n                    question: 'What is the difference between == and ===?',\n                    options: [\n                        'They are the same',\n                        '== performs type coercion, === checks both value and type',\n                        '== is for numbers, === is for strings',\n                        '== is for variables, === is for constants'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q6',\n                    question: 'What is closure in JavaScript?',\n                    options: [\n                        'A way to close a function',\n                        'A function with access to its outer scope',\n                        'A way to end a program',\n                        'A way to close a file'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q7',\n                    question: \"What is the 'this' keyword?\",\n                    options: [\n                        'A way to refer to the current function',\n                        'A reference to the current object',\n                        'A way to refer to the next function',\n                        'A way to refer to the previous function'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q8',\n                    question: 'What is the difference between call(), apply(), and bind()?',\n                    options: [\n                        'They are all the same',\n                        'Different ways to set the this value',\n                        'Different ways to call a function',\n                        'Different ways to bind a function'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q9',\n                    question: 'What is a promise?',\n                    options: [\n                        'A way to make a function call',\n                        'An object representing an asynchronous operation',\n                        'A way to create a variable',\n                        'A way to create an object'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q10',\n                    question: 'What is async/await?',\n                    options: [\n                        'A way to create a function',\n                        'A syntax for handling promises',\n                        'A way to create a variable',\n                        'A way to create an object'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q11',\n                    question: 'What is the event loop?',\n                    options: [\n                        'A way to create a loop',\n                        'A mechanism for handling asynchronous operations',\n                        'A way to create a function',\n                        'A way to create a variable'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q12',\n                    question: 'What is the difference between synchronous and asynchronous code?',\n                    options: [\n                        'They are the same',\n                        'Synchronous executes in sequence, asynchronous allows other operations to continue',\n                        'Synchronous is for variables, asynchronous is for functions',\n                        'Synchronous is for numbers, asynchronous is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q13',\n                    question: 'What is a callback function?',\n                    options: [\n                        'A way to create a function',\n                        'A function passed as an argument to another function',\n                        'A way to create a variable',\n                        'A way to create an object'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q14',\n                    question: 'What is the difference between null and undefined?',\n                    options: [\n                        'They are the same',\n                        'undefined is unassigned, null is explicitly assigned',\n                        'undefined is for numbers, null is for strings',\n                        'undefined is for variables, null is for functions'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q15',\n                    question: 'What is the difference between function declaration and function expression?',\n                    options: [\n                        'They are the same',\n                        'Declaration is hoisted, expression is not',\n                        'Declaration is for variables, expression is for functions',\n                        'Declaration is for numbers, expression is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q16',\n                    question: 'What is the spread operator?',\n                    options: [\n                        'A way to create a function',\n                        'A way to expand iterables',\n                        'A way to create a variable',\n                        'A way to create an object'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q17',\n                    question: 'What is destructuring?',\n                    options: [\n                        'A way to create a function',\n                        'A way to extract values from arrays or objects',\n                        'A way to create a variable',\n                        'A way to create an object'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q18',\n                    question: 'What is the difference between map(), filter(), and reduce()?',\n                    options: [\n                        'They are the same',\n                        'Different array methods for transformation, filtering, and reduction',\n                        'Different ways to create a function',\n                        'Different ways to create a variable'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q19',\n                    question: 'What is the difference between forEach() and map()?',\n                    options: [\n                        'They are the same',\n                        'forEach() executes for each element, map() creates a new array',\n                        'forEach() is for variables, map() is for functions',\n                        'forEach() is for numbers, map() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q20',\n                    question: 'What is the difference between slice() and splice()?',\n                    options: [\n                        'They are the same',\n                        'slice() returns a copy, splice() modifies the array',\n                        'slice() is for variables, splice() is for functions',\n                        'slice() is for numbers, splice() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q21',\n                    question: 'What is the prototype chain?',\n                    options: [\n                        'A way to create a function',\n                        'How JavaScript implements inheritance',\n                        'A way to create a variable',\n                        'A way to create an object'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q22',\n                    question: 'What is the difference between classical and prototypal inheritance?',\n                    options: [\n                        'They are the same',\n                        'Classical uses classes, prototypal uses objects',\n                        'Classical is for variables, prototypal is for functions',\n                        'Classical is for numbers, prototypal is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q23',\n                    question: 'What is the difference between Object.create() and new?',\n                    options: [\n                        'They are the same',\n                        'Object.create() creates with prototype, new creates instance',\n                        'Object.create() is for variables, new is for functions',\n                        'Object.create() is for numbers, new is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q24',\n                    question: 'What is the difference between Object.freeze() and Object.seal()?',\n                    options: [\n                        'They are the same',\n                        'freeze() makes immutable, seal() prevents adding/removing properties',\n                        'freeze() is for variables, seal() is for functions',\n                        'freeze() is for numbers, seal() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q25',\n                    question: 'What is the difference between Object.keys() and Object.entries()?',\n                    options: [\n                        'They are the same',\n                        'keys() returns property names, entries() returns [key, value] pairs',\n                        'keys() is for variables, entries() is for functions',\n                        'keys() is for numbers, entries() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q26',\n                    question: 'What is the difference between Object.assign() and the spread operator?',\n                    options: [\n                        'They are the same',\n                        'assign() modifies target, spread creates new object',\n                        'assign() is for variables, spread is for functions',\n                        'assign() is for numbers, spread is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q27',\n                    question: 'What is the difference between Array.from() and the spread operator?',\n                    options: [\n                        'They are the same',\n                        'from() can convert array-like objects, spread only works with iterables',\n                        'from() is for variables, spread is for functions',\n                        'from() is for numbers, spread is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q28',\n                    question: 'What is the difference between Array.isArray() and instanceof Array?',\n                    options: [\n                        'They are the same',\n                        'isArray() is more reliable across contexts',\n                        'isArray() is for variables, instanceof is for functions',\n                        'isArray() is for numbers, instanceof is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q29',\n                    question: 'What is the difference between String.prototype.slice() and String.prototype.substring()?',\n                    options: [\n                        'They are the same',\n                        'slice() can use negative indices, substring() swaps parameters',\n                        'slice() is for variables, substring() is for functions',\n                        'slice() is for numbers, substring() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q30',\n                    question: 'What is the difference between String.prototype.replace() and String.prototype.replaceAll()?',\n                    options: [\n                        'They are the same',\n                        'replace() replaces first occurrence, replaceAll() replaces all',\n                        'replace() is for variables, replaceAll() is for functions',\n                        'replace() is for numbers, replaceAll() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q31',\n                    question: 'What is the difference between String.prototype.trim() and String.prototype.trimStart()?',\n                    options: [\n                        'They are the same',\n                        'trim() removes from both ends, trimStart() removes from start',\n                        'trim() is for variables, trimStart() is for functions',\n                        'trim() is for numbers, trimStart() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q32',\n                    question: 'What is the difference between String.prototype.padStart() and String.prototype.padEnd()?',\n                    options: [\n                        'They are the same',\n                        'padStart() pads beginning, padEnd() pads end',\n                        'padStart() is for variables, padEnd() is for functions',\n                        'padStart() is for numbers, padEnd() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q33',\n                    question: 'What is the difference between String.prototype.includes() and String.prototype.indexOf()?',\n                    options: [\n                        'They are the same',\n                        'includes() returns boolean, indexOf() returns index',\n                        'includes() is for variables, indexOf() is for functions',\n                        'includes() is for numbers, indexOf() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q34',\n                    question: 'What is the difference between String.prototype.startsWith() and String.prototype.endsWith()?',\n                    options: [\n                        'They are the same',\n                        'startsWith() checks beginning, endsWith() checks end',\n                        'startsWith() is for variables, endsWith() is for functions',\n                        'startsWith() is for numbers, endsWith() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q35',\n                    question: 'What is the difference between String.prototype.toLowerCase() and String.prototype.toUpperCase()?',\n                    options: [\n                        'They are the same',\n                        'toLowerCase() converts to lowercase, toUpperCase() converts to uppercase',\n                        'toLowerCase() is for variables, toUpperCase() is for functions',\n                        'toLowerCase() is for numbers, toUpperCase() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q36',\n                    question: 'What is the difference between String.prototype.split() and String.prototype.match()?',\n                    options: [\n                        'They are the same',\n                        'split() splits into array, match() retrieves regex matches',\n                        'split() is for variables, match() is for functions',\n                        'split() is for numbers, match() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q37',\n                    question: 'What is the difference between String.prototype.concat() and the + operator?',\n                    options: [\n                        'They are the same',\n                        'concat() joins strings, + operator is more commonly used',\n                        'concat() is for variables, + is for functions',\n                        'concat() is for numbers, + is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q38',\n                    question: 'What is the difference between String.prototype.repeat() and String.prototype.padStart()?',\n                    options: [\n                        'They are the same',\n                        'repeat() creates copies, padStart() pads to length',\n                        'repeat() is for variables, padStart() is for functions',\n                        'repeat() is for numbers, padStart() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q39',\n                    question: 'What is the difference between String.prototype.trim() and String.prototype.trimEnd()?',\n                    options: [\n                        'They are the same',\n                        'trim() removes from both ends, trimEnd() removes from end',\n                        'trim() is for variables, trimEnd() is for functions',\n                        'trim() is for numbers, trimEnd() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q40',\n                    question: 'What is the difference between String.prototype.search() and String.prototype.match()?',\n                    options: [\n                        'They are the same',\n                        'search() returns index, match() returns array of matches',\n                        'search() is for variables, match() is for functions',\n                        'search() is for numbers, match() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q41',\n                    question: 'What is the difference between String.prototype.indexOf() and String.prototype.lastIndexOf()?',\n                    options: [\n                        'They are the same',\n                        'indexOf() returns first occurrence, lastIndexOf() returns last occurrence',\n                        'indexOf() is for variables, lastIndexOf() is for functions',\n                        'indexOf() is for numbers, lastIndexOf() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q42',\n                    question: 'What is the difference between String.prototype.charCodeAt() and String.prototype.codePointAt()?',\n                    options: [\n                        'They are the same',\n                        'charCodeAt() returns UTF-16 code unit, codePointAt() returns Unicode code point',\n                        'charCodeAt() is for variables, codePointAt() is for functions',\n                        'charCodeAt() is for numbers, codePointAt() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q43',\n                    question: 'What is the difference between String.prototype.normalize() and String.prototype.localeCompare()?',\n                    options: [\n                        'They are the same',\n                        'normalize() returns Unicode Normalization Form, localeCompare() compares strings',\n                        'normalize() is for variables, localeCompare() is for functions',\n                        'normalize() is for numbers, localeCompare() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q44',\n                    question: 'What is the difference between String.prototype.toLocaleLowerCase() and String.prototype.toLocaleUpperCase()?',\n                    options: [\n                        'They are the same',\n                        'toLocaleLowerCase() converts to lowercase, toLocaleUpperCase() converts to uppercase',\n                        'toLocaleLowerCase() is for variables, toLocaleUpperCase() is for functions',\n                        'toLocaleLowerCase() is for numbers, toLocaleUpperCase() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q45',\n                    question: 'What is the difference between String.prototype.anchor() and String.prototype.link()?',\n                    options: [\n                        'They are the same',\n                        'anchor() creates anchor element, link() creates link element',\n                        'anchor() is for variables, link() is for functions',\n                        'anchor() is for numbers, link() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q46',\n                    question: 'What is the difference between String.prototype.big() and String.prototype.small()?',\n                    options: [\n                        'They are the same',\n                        'big() creates big font, small() creates small font',\n                        'big() is for variables, small() is for functions',\n                        'big() is for numbers, small() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q47',\n                    question: 'What is the difference between String.prototype.bold() and String.prototype.italics()?',\n                    options: [\n                        'They are the same',\n                        'bold() creates bold text, italics() creates italic text',\n                        'bold() is for variables, italics() is for functions',\n                        'bold() is for numbers, italics() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q48',\n                    question: 'What is the difference between String.prototype.fixed() and String.prototype.strike()?',\n                    options: [\n                        'They are the same',\n                        'fixed() creates monospace font, strike() creates strikethrough text',\n                        'fixed() is for variables, strike() is for functions',\n                        'fixed() is for numbers, strike() is for strings'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'js-q49',\n                    question: 'What is the difference between String.prototype.sub() and String.prototype.sup()?',\n                    options: [\n                        'They are the same',\n                        'sub() creates subscript text, sup() creates superscript text',\n                        'sub() is for variables, sup() is for functions',\n                        'To create tables',\n                        'To create animations',\n                        'To specify the stack order of elements',\n                        'To create colors'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q15',\n                    question: 'What is the purpose of the position property?',\n                    options: [\n                        'To create tables',\n                        'To create animations',\n                        'To specify how an element is positioned',\n                        'To create colors'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q16',\n                    question: 'What is the purpose of the display property?',\n                    options: [\n                        'To create tables',\n                        'To create animations',\n                        'To specify how an element is displayed',\n                        'To create colors'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q17',\n                    question: 'What is the purpose of the float property?',\n                    options: [\n                        'To create tables',\n                        'To create animations',\n                        'To specify how an element should float',\n                        'To create colors'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q18',\n                    question: 'What is the purpose of the clear property?',\n                    options: [\n                        'To create tables',\n                        'To create animations',\n                        'To specify which sides of an element can be next to floating elements',\n                        'To create colors'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q19',\n                    question: 'What is the purpose of the overflow property?',\n                    options: [\n                        'To create tables',\n                        'To create animations',\n                        'To specify what happens if content overflows an element\\'s box',\n                        'To create colors'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q20',\n                    question: 'What is the purpose of the visibility property?',\n                    options: [\n                        'To create tables',\n                        'To create animations',\n                        'To specify whether an element is visible or hidden',\n                        'To create colors'\n                    ],\n                    correctAnswer: 2\n                }\n            ]\n        }\n    }\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/data/learningPaths.ts\n"));

/***/ })

});