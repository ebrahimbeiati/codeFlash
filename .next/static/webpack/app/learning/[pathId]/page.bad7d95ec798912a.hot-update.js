"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/learning/[pathId]/page",{

/***/ "(app-pages-browser)/./src/lib/data/learningPaths.ts":
/*!***************************************!*\
  !*** ./src/lib/data/learningPaths.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   learningPaths: () => (/* binding */ learningPaths)\n/* harmony export */ });\nconst learningPaths = [\n    {\n        id: 'intro-to-digital',\n        title: 'Introduction to Digital',\n        description: 'Master the fundamentals of digital technology and computer basics',\n        level: 'beginner',\n        sets: [\n            {\n                id: 'computer-basics',\n                title: 'Computer Basics',\n                description: 'Essential knowledge about computers and digital systems',\n                cards: [\n                    {\n                        id: 'cb-1',\n                        front: 'What is a CPU?',\n                        back: 'CPU (Central Processing Unit) is the primary component of a computer that processes instructions and performs calculations. It\\'s often called the \"brain\" of the computer.'\n                    },\n                    {\n                        id: 'cb-2',\n                        front: 'What is RAM?',\n                        back: 'RAM (Random Access Memory) is temporary storage that holds data and instructions for the CPU to process. It\\'s volatile memory, meaning it loses its contents when power is turned off.'\n                    },\n                    {\n                        id: 'cb-3',\n                        front: 'What is the difference between hardware and software?',\n                        back: 'Hardware refers to physical components of a computer (CPU, RAM, hard drive), while software refers to programs and applications that run on the hardware.'\n                    },\n                    {\n                        id: 'cb-4',\n                        front: 'What is an operating system?',\n                        back: 'An operating system (OS) is software that manages computer hardware and software resources, providing common services for computer programs.'\n                    },\n                    {\n                        id: 'cb-5',\n                        front: 'What is a motherboard?',\n                        back: 'The motherboard is the main circuit board of a computer that connects all components together, including CPU, RAM, storage, and other peripherals.'\n                    }\n                ]\n            },\n            {\n                id: 'digital-concepts',\n                title: 'Digital Concepts',\n                description: 'Understanding digital data and binary systems',\n                cards: [\n                    {\n                        id: 'dc-1',\n                        front: 'What is binary?',\n                        back: 'Binary is a number system that uses only two digits: 0 and 1. It\\'s the fundamental language of computers, where each digit is called a bit.'\n                    },\n                    {\n                        id: 'dc-2',\n                        front: 'What is a byte?',\n                        back: 'A byte is a unit of digital information that consists of 8 bits. It\\'s the basic unit of storage in computer systems.'\n                    },\n                    {\n                        id: 'dc-3',\n                        front: 'What is ASCII?',\n                        back: 'ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers. It uses 7 bits to represent 128 characters.'\n                    },\n                    {\n                        id: 'dc-4',\n                        front: 'What is Unicode?',\n                        back: 'Unicode is a character encoding standard that can represent almost all characters from all writing systems in the world. It\\'s an extension of ASCII.'\n                    },\n                    {\n                        id: 'dc-5',\n                        front: 'What is the difference between analog and digital?',\n                        back: 'Analog signals are continuous and can have any value, while digital signals are discrete and can only have specific values (usually 0 and 1).'\n                    }\n                ]\n            }\n        ],\n        quiz: {\n            questions: [\n                {\n                    id: 'q1',\n                    question: 'Which component is often called the \"brain\" of the computer?',\n                    options: [\n                        'RAM',\n                        'CPU',\n                        'Hard Drive',\n                        'Motherboard'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q2',\n                    question: 'What is the main difference between RAM and ROM?',\n                    options: [\n                        'RAM is faster than ROM',\n                        'RAM is volatile, ROM is non-volatile',\n                        'RAM is cheaper than ROM',\n                        'RAM is newer technology than ROM'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q3',\n                    question: 'How many bits are in a byte?',\n                    options: [\n                        '4',\n                        '8',\n                        '16',\n                        '32'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q4',\n                    question: 'What is the purpose of an operating system?',\n                    options: [\n                        'To make the computer look pretty',\n                        'To manage hardware and software resources',\n                        'To connect to the internet',\n                        'To store data permanently'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q5',\n                    question: 'Which of the following is NOT a binary number?',\n                    options: [\n                        '1010',\n                        '1111',\n                        '1234',\n                        '1001'\n                    ],\n                    correctAnswer: 2\n                }\n            ]\n        }\n    },\n    {\n        id: 'intro-to-programming',\n        title: 'Introduction to Programming',\n        description: 'Learn the basics of programming and computational thinking',\n        level: 'beginner',\n        sets: [\n            {\n                id: 'programming-basics',\n                title: 'Programming Fundamentals',\n                description: 'Core concepts of programming and problem-solving',\n                cards: [\n                    {\n                        id: 'pb-1',\n                        front: 'What is a variable?',\n                        back: 'A variable is a named container that stores data in a program. It can hold different types of values (numbers, text, etc.) and its value can change during program execution.'\n                    },\n                    {\n                        id: 'pb-2',\n                        front: 'What is a function?',\n                        back: 'A function is a reusable block of code that performs a specific task. It can take inputs (parameters) and return outputs.'\n                    },\n                    {\n                        id: 'pb-3',\n                        front: 'What is a loop?',\n                        back: 'A loop is a programming structure that repeats a block of code multiple times. Common types include for loops and while loops.'\n                    },\n                    {\n                        id: 'pb-4',\n                        front: 'What is an algorithm?',\n                        back: 'An algorithm is a step-by-step procedure for solving a problem or accomplishing a task. It\\'s like a recipe for a computer to follow.'\n                    },\n                    {\n                        id: 'pb-5',\n                        front: 'What is debugging?',\n                        back: 'Debugging is the process of finding and fixing errors (bugs) in a program. It involves identifying the cause of the error and making the necessary corrections.'\n                    }\n                ]\n            },\n            {\n                id: 'data-structures',\n                title: 'Basic Data Structures',\n                description: 'Understanding how to organize and store data',\n                cards: [\n                    {\n                        id: 'ds-1',\n                        front: 'What is an array?',\n                        back: 'An array is a data structure that stores a collection of elements, each identified by an index. Elements can be accessed directly using their index.'\n                    },\n                    {\n                        id: 'ds-2',\n                        front: 'What is a string?',\n                        back: 'A string is a sequence of characters. In programming, strings are typically used to represent text.'\n                    },\n                    {\n                        id: 'ds-3',\n                        front: 'What is a boolean?',\n                        back: 'A boolean is a data type that can have only two values: true or false. It\\'s used for logical operations and conditions.'\n                    },\n                    {\n                        id: 'ds-4',\n                        front: 'What is a list?',\n                        back: 'A list is a data structure that can store multiple items in a single variable. Unlike arrays, lists can store items of different types.'\n                    },\n                    {\n                        id: 'ds-5',\n                        front: 'What is a dictionary/map?',\n                        back: 'A dictionary (or map) is a data structure that stores key-value pairs. Each value is associated with a unique key that can be used to access it.'\n                    }\n                ]\n            }\n        ],\n        quiz: {\n            questions: [\n                {\n                    id: 'q1',\n                    question: 'What is the purpose of a variable in programming?',\n                    options: [\n                        'To make the code look pretty',\n                        'To store and manipulate data',\n                        'To connect to the internet',\n                        'To display text on screen'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q2',\n                    question: 'Which of the following is NOT a common loop type?',\n                    options: [\n                        'for loop',\n                        'while loop',\n                        'if loop',\n                        'do-while loop'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q3',\n                    question: 'What is the main difference between an array and a list?',\n                    options: [\n                        'Arrays are faster than lists',\n                        'Lists can store different types of data',\n                        'Arrays can store more data',\n                        'Lists are always sorted'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q4',\n                    question: 'What is the purpose of a function?',\n                    options: [\n                        'To make the program run faster',\n                        'To store data permanently',\n                        'To reuse code and perform specific tasks',\n                        'To connect to a database'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q5',\n                    question: 'What is debugging?',\n                    options: [\n                        'Writing new code',\n                        'Finding and fixing errors',\n                        'Making the program run faster',\n                        'Adding new features'\n                    ],\n                    correctAnswer: 1\n                }\n            ]\n        }\n    },\n    {\n        id: 'javascript-basics',\n        title: 'JavaScript Basics',\n        description: 'Master the fundamentals of JavaScript programming language',\n        level: 'beginner',\n        sets: [\n            {\n                id: 'variables-and-types',\n                title: 'Variables and Data Types',\n                description: 'Learn about variables, primitive types, and type coercion',\n                cards: [\n                    {\n                        id: 'var-let-const',\n                        front: 'What are the three ways to declare variables in JavaScript?',\n                        back: 'var, let, and const. var is function-scoped, let and const are block-scoped. const cannot be reassigned.'\n                    },\n                    {\n                        id: 'primitive-types',\n                        front: 'What are the primitive types in JavaScript?',\n                        back: 'String, Number, Boolean, Null, Undefined, Symbol, and BigInt'\n                    },\n                    {\n                        id: 'type-coercion',\n                        front: 'What is type coercion in JavaScript?',\n                        back: 'The automatic conversion of values from one data type to another. For example, \"5\" + 3 results in \"53\"'\n                    },\n                    {\n                        id: 'typeof-operator',\n                        front: 'What does the typeof operator return for null?',\n                        back: 'typeof null returns \"object\", which is a known JavaScript quirk'\n                    },\n                    {\n                        id: 'hoisting',\n                        front: 'What is hoisting in JavaScript?',\n                        back: 'The process where variable and function declarations are moved to the top of their scope before code execution'\n                    }\n                ]\n            },\n            {\n                id: 'functions',\n                title: 'Functions and Scope',\n                description: 'Understand function declarations, expressions, and scope',\n                cards: [\n                    {\n                        id: 'function-declaration',\n                        front: 'What is a function declaration?',\n                        back: 'A function that is declared using the function keyword and is hoisted to the top of its scope'\n                    },\n                    {\n                        id: 'arrow-functions',\n                        front: 'What are arrow functions?',\n                        back: 'A shorter syntax for writing function expressions, introduced in ES6. They don\\'t have their own this binding'\n                    },\n                    {\n                        id: 'closure',\n                        front: 'What is a closure in JavaScript?',\n                        back: 'A function that has access to variables from its outer (enclosing) lexical scope, even after the outer function has returned'\n                    },\n                    {\n                        id: 'scope',\n                        front: 'What are the different types of scope in JavaScript?',\n                        back: 'Global scope, function scope, and block scope (introduced with let and const)'\n                    },\n                    {\n                        id: 'this-keyword',\n                        front: 'What is the this keyword in JavaScript?',\n                        back: 'A reference to the object that is currently executing the code. Its value depends on how a function is called'\n                    }\n                ]\n            }\n        ],\n        quiz: {\n            questions: [\n                {\n                    id: 'q1',\n                    question: 'Which of the following is NOT a primitive type in JavaScript?',\n                    options: [\n                        'String',\n                        'Number',\n                        'Object',\n                        'Boolean'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q2',\n                    question: 'What is the output of typeof null?',\n                    options: [\n                        '\"null\"',\n                        '\"object\"',\n                        '\"undefined\"',\n                        '\"number\"'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q3',\n                    question: 'Which variable declaration is block-scoped?',\n                    options: [\n                        'var',\n                        'let',\n                        'const',\n                        'Both let and const'\n                    ],\n                    correctAnswer: 3\n                },\n                {\n                    id: 'q4',\n                    question: 'What is a closure in JavaScript?',\n                    options: [\n                        'A function that returns another function',\n                        'A function that has access to variables from its outer scope',\n                        'A function that takes another function as an argument',\n                        'A function that is called immediately after declaration'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q5',\n                    question: 'Which of the following is true about arrow functions?',\n                    options: [\n                        'They have their own this binding',\n                        'They can be used as constructors',\n                        'They don\\'t have their own this binding',\n                        'They are always hoisted'\n                    ],\n                    correctAnswer: 2\n                }\n            ]\n        }\n    },\n    {\n        id: 'react-basics',\n        title: 'React Fundamentals',\n        description: 'Learn the core concepts of React and build modern web applications',\n        level: 'intermediate',\n        sets: [\n            {\n                id: 'components-props',\n                title: 'Components and Props',\n                description: 'Understand React components, props, and component composition',\n                cards: [\n                    {\n                        id: 'functional-components',\n                        front: 'What is a functional component in React?',\n                        back: 'A JavaScript function that accepts props as an argument and returns a React element'\n                    },\n                    {\n                        id: 'props',\n                        front: 'What are props in React?',\n                        back: 'Props (properties) are read-only components that are passed from parent to child components'\n                    },\n                    {\n                        id: 'component-composition',\n                        front: 'What is component composition?',\n                        back: 'The process of combining multiple components to create more complex UIs'\n                    },\n                    {\n                        id: 'prop-types',\n                        front: 'What are PropTypes?',\n                        back: 'A way to specify the type of props a component should receive, helping with debugging'\n                    },\n                    {\n                        id: 'default-props',\n                        front: 'How do you set default props in React?',\n                        back: 'Using the defaultProps property or by using default parameters in the function component'\n                    }\n                ]\n            },\n            {\n                id: 'state-hooks',\n                title: 'State and Hooks',\n                description: 'Master React state management and hooks',\n                cards: [\n                    {\n                        id: 'useState',\n                        front: 'What is the useState hook?',\n                        back: 'A hook that lets you add state to functional components'\n                    },\n                    {\n                        id: 'useEffect',\n                        front: 'What is the useEffect hook?',\n                        back: 'A hook that lets you perform side effects in functional components'\n                    },\n                    {\n                        id: 'useContext',\n                        front: 'What is the useContext hook?',\n                        back: 'A hook that lets you consume context in functional components'\n                    },\n                    {\n                        id: 'useReducer',\n                        front: 'What is the useReducer hook?',\n                        back: 'A hook that lets you manage complex state logic using reducers'\n                    },\n                    {\n                        id: 'custom-hooks',\n                        front: 'What are custom hooks?',\n                        back: 'JavaScript functions that start with \"use\" and can call other hooks'\n                    }\n                ]\n            }\n        ],\n        quiz: {\n            questions: [\n                {\n                    id: 'q1',\n                    question: 'What is the main difference between props and state?',\n                    options: [\n                        'Props are mutable, state is immutable',\n                        'Props are immutable, state is mutable',\n                        'Props are for styling, state is for data',\n                        'Props are for functions, state is for variables'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q2',\n                    question: 'Which hook is used for side effects?',\n                    options: [\n                        'useState',\n                        'useEffect',\n                        'useContext',\n                        'useReducer'\n                    ],\n                    correctAnswer: 1\n                },\n                {\n                    id: 'q3',\n                    question: 'What is the correct way to update state in a functional component?',\n                    options: [\n                        'this.setState()',\n                        'setState()',\n                        'useState()',\n                        'Using the setter function from useState'\n                    ],\n                    correctAnswer: 3\n                },\n                {\n                    id: 'q4',\n                    question: 'Which of the following is NOT a built-in React hook?',\n                    options: [\n                        'useState',\n                        'useEffect',\n                        'useData',\n                        'useContext'\n                    ],\n                    correctAnswer: 2\n                },\n                {\n                    id: 'q5',\n                    question: 'What is the purpose of the key prop in React lists?',\n                    options: [\n                        'To style the list items',\n                        'To make the list items clickable',\n                        'To help React identify which items have changed',\n                        'To sort the list items'\n                    ],\n                    correctAnswer: 2\n                }\n            ]\n        }\n    }\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/data/learningPaths.ts\n"));

/***/ })

});