{
  "id": "react-basics",
  "title": "React Fundamentals",
  "description": "Learn the core concepts of React and modern web development",
  "level": "beginner",
  "sets": [
    {
      "id": "react-core",
      "title": "React Core Concepts",
      "description": "Understanding React fundamentals and component-based architecture",
      "cards": [
        {
          "id": "rc-1",
          "front": "What is React?",
          "back": "React is a JavaScript library for building user interfaces, particularly single-page applications. It's maintained by Facebook and a community of developers."
        },
        {
          "id": "rc-2",
          "front": "What is a component?",
          "back": "A component is a reusable piece of UI that can contain its own logic and state. Components can be functional or class-based."
        },
        {
          "id": "rc-3",
          "front": "What is JSX?",
          "back": "JSX is a syntax extension for JavaScript that allows you to write HTML-like code in your JavaScript files. It gets transformed into regular JavaScript."
        },
        {
          "id": "rc-4",
          "front": "What is state?",
          "back": "State is a JavaScript object that stores a component's dynamic data and determines the component's behavior and rendering."
        },
        {
          "id": "rc-5",
          "front": "What are props?",
          "back": "Props (properties) are read-only components that are passed from parent to child components. They are used to pass data and event handlers."
        },
        {
          "id": "rc-6",
          "front": "What is the Virtual DOM?",
          "back": "The Virtual DOM is a lightweight copy of the actual DOM. React uses it to improve performance by minimizing direct manipulation of the DOM."
        },
        {
          "id": "rc-7",
          "front": "What is a hook?",
          "back": "Hooks are functions that let you use state and other React features in functional components. Examples include useState and useEffect."
        },
        {
          "id": "rc-8",
          "front": "What is useState?",
          "back": "useState is a Hook that lets you add state to functional components. It returns an array with the current state and a function to update it."
        },
        {
          "id": "rc-9",
          "front": "What is useEffect?",
          "back": "useEffect is a Hook that lets you perform side effects in functional components, such as data fetching, subscriptions, or DOM manipulations."
        },
        {
          "id": "rc-10",
          "front": "What is a controlled component?",
          "back": "A controlled component is a form element whose value is controlled by React state. The component's value is always in sync with the state."
        },
        {
          "id": "rc-11",
          "front": "What is a key prop?",
          "back": "The key prop is a special attribute used to identify which items have changed, been added, or been removed in lists. It helps React optimize rendering."
        },
        {
          "id": "rc-12",
          "front": "What is prop drilling?",
          "back": "Prop drilling is the process of passing props through multiple levels of components. It can be avoided using Context or state management libraries."
        },
        {
          "id": "rc-13",
          "front": "What is Context?",
          "back": "Context provides a way to pass data through the component tree without having to pass props manually at every level."
        },
        {
          "id": "rc-14",
          "front": "What is a ref?",
          "back": "A ref is a way to access and interact with DOM elements or React components directly. It's created using useRef or createRef."
        },
        {
          "id": "rc-15",
          "front": "What is a higher-order component (HOC)?",
          "back": "A HOC is a function that takes a component and returns a new component with additional functionality. It's used for code reuse and logic sharing."
        },
        {
          "id": "rc-16",
          "front": "What is a custom hook?",
          "back": "A custom hook is a JavaScript function that starts with \"use\" and can call other hooks. It allows you to extract component logic into reusable functions."
        },
        {
          "id": "rc-17",
          "front": "What is React Router?",
          "back": "React Router is a library for handling routing in React applications. It enables navigation between different components while maintaining the URL."
        },
        {
          "id": "rc-18",
          "front": "What is Redux?",
          "back": "Redux is a state management library for JavaScript applications. It provides a predictable state container and helps manage application state."
        },
        {
          "id": "rc-19",
          "front": "What is a reducer?",
          "back": "A reducer is a pure function that takes the current state and an action, and returns the new state. It's used in state management to handle state updates."
        },
        {
          "id": "rc-20",
          "front": "What is the difference between state and props?",
          "back": "State is managed within a component and can be changed, while props are read-only and passed from parent to child components."
        }
      ]
    },
    {
      "id": "react-advanced",
      "title": "Advanced React Concepts",
      "description": "Understanding advanced React patterns and best practices",
      "cards": [
        {
          "id": "ra-1",
          "front": "What is code splitting?",
          "back": "Code splitting is a technique that allows you to split your code into various bundles which can then be loaded on demand or in parallel."
        },
        {
          "id": "ra-2",
          "front": "What is lazy loading?",
          "back": "Lazy loading is a technique that delays the loading of non-critical resources at page load time. It helps improve initial load performance."
        },
        {
          "id": "ra-3",
          "front": "What is memoization?",
          "back": "Memoization is an optimization technique that stores the results of expensive function calls and returns the cached result when the same inputs occur again."
        },
        {
          "id": "ra-4",
          "front": "What is React.memo?",
          "back": "React.memo is a higher-order component that memoizes a component. It prevents unnecessary re-renders when props haven't changed."
        },
        {
          "id": "ra-5",
          "front": "What is useMemo?",
          "back": "useMemo is a Hook that memoizes a computed value. It only recomputes the value when one of its dependencies has changed."
        },
        {
          "id": "ra-6",
          "front": "What is useCallback?",
          "back": "useCallback is a Hook that memoizes a callback function. It returns the same function instance between re-renders unless dependencies change."
        },
        {
          "id": "ra-7",
          "front": "What is a portal?",
          "back": "Portals provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component."
        },
        {
          "id": "ra-8",
          "front": "What is error boundary?",
          "back": "Error boundaries are React components that catch JavaScript errors anywhere in their child component tree and display a fallback UI."
        },
        {
          "id": "ra-9",
          "front": "What is a render prop?",
          "back": "A render prop is a technique for sharing code between components using a prop whose value is a function that returns a React element."
        },
        {
          "id": "ra-10",
          "front": "What is a compound component?",
          "back": "Compound components are a pattern where components work together to share state and handle logic while giving you a flexible way to customize the UI."
        },
        {
          "id": "ra-11",
          "front": "What is the Context API?",
          "back": "The Context API is a React feature that provides a way to pass data through the component tree without having to pass props manually at every level."
        },
        {
          "id": "ra-12",
          "front": "What is a custom hook?",
          "back": "A custom hook is a reusable function starting with \"use\" that encapsulates stateful logic. Unlike regular functions, custom hooks can call other React hooks and share state logic between components."
        },
        {
          "id": "ra-13",
          "front": "What is React.lazy?",
          "back": "React.lazy is a function that lets you render a dynamic import as a regular component. It's used for code splitting and lazy loading."
        },
        {
          "id": "ra-14",
          "front": "What is Suspense?",
          "back": "Suspense is a React component that lets you specify a loading state while waiting for some code to load. It works with React.lazy for code splitting."
        },
        {
          "id": "ra-15",
          "front": "What is a controlled component?",
          "back": "A controlled component is a form element where React controls the value through state and onChange handlers. Every state mutation has an associated handler function, making the React state the \"single source of truth\"."
        },
        {
          "id": "ra-16",
          "front": "What is an uncontrolled component?",
          "back": "An uncontrolled component is a form element whose value is controlled by the DOM. It maintains its own internal state."
        },
        {
          "id": "ra-17",
          "front": "What is the difference between useEffect and useLayoutEffect?",
          "back": "useEffect runs after the render is committed to the screen, while useLayoutEffect runs synchronously after all DOM mutations."
        },
        {
          "id": "ra-18",
          "front": "What is the purpose of useRef?",
          "back": "useRef returns a mutable ref object that persists for the full lifetime of the component. It can be used to access DOM elements or store mutable values."
        },
        {
          "id": "ra-19",
          "front": "What is the purpose of useReducer?",
          "back": "useReducer is a Hook that is used for state management. It accepts a reducer function and an initial state, and returns the current state and a dispatch function."
        },
        {
          "id": "ra-20",
          "front": "What is the purpose of useImperativeHandle?",
          "back": "useImperativeHandle customizes the instance value that is exposed when using React.forwardRef. It allows you to control what methods are exposed to parent components."
        }
      ]
    }
  ],
  "quizzes": [
    {
      "questions": [
        {
          "id": "q1",
          "question": "What is the main purpose of React?",
          "options": [
            "To style web pages",
            "To build user interfaces",
            "To connect to databases",
            "To handle server-side logic"
          ],
          "correctAnswer": 1
        },
        {
          "id": "q2",
          "question": "What is JSX?",
          "options": [
            "A database query language",
            "A styling language",
            "A syntax extension for JavaScript",
            "A server-side framework"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q3",
          "question": "What is the difference between state and props?",
          "options": [
            "State is for styling, props are for data",
            "State is mutable, props are read-only",
            "State is for functions, props are for variables",
            "State is for HTML, props are for CSS"
          ],
          "correctAnswer": 1
        },
        {
          "id": "q4",
          "question": "What is the purpose of useEffect?",
          "options": [
            "To style components",
            "To handle routing",
            "To perform side effects",
            "To create new components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q5",
          "question": "What is a controlled component?",
          "options": [
            "A component that uses CSS",
            "A component that uses JavaScript",
            "A component whose value is controlled by React state",
            "A component that controls other components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q6",
          "question": "What is the purpose of the key prop?",
          "options": [
            "To style elements",
            "To identify items in lists",
            "To connect to APIs",
            "To handle events"
          ],
          "correctAnswer": 1
        },
        {
          "id": "q7",
          "question": "What is prop drilling?",
          "options": [
            "A way to style components",
            "A way to handle events",
            "Passing props through multiple levels",
            "A way to create new components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q8",
          "question": "What is the purpose of Context?",
          "options": [
            "To style components",
            "To handle routing",
            "To pass data through the component tree",
            "To create new components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q9",
          "question": "What is a custom hook?",
          "options": [
            "A way to style components",
            "A way to handle events",
            "A reusable function that can use other hooks",
            "A way to create new components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q10",
          "question": "What is the purpose of useMemo?",
          "options": [
            "To style components",
            "To handle routing",
            "To memoize computed values",
            "To create new components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q11",
          "question": "What is the purpose of useCallback?",
          "options": [
            "To style components",
            "To memoize callback functions",
            "To handle routing",
            "To create new components"
          ],
          "correctAnswer": 1
        },
        {
          "id": "q12",
          "question": "What is the purpose of a portal?",
          "options": [
            "To style components",
            "To handle routing",
            "To render children outside the DOM hierarchy",
            "To create new components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q13",
          "question": "What is an error boundary?",
          "options": [
            "A way to style components",
            "A way to handle routing",
            "A component that catches JavaScript errors",
            "A way to create new components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q14",
          "question": "What is a render prop?",
          "options": [
            "A way to style components",
            "A way to handle routing",
            "A prop whose value is a function that returns a React element",
            "A way to create new components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q15",
          "question": "What is a compound component?",
          "options": [
            "A way to style components",
            "A way to handle routing",
            "Components that work together to share state",
            "A way to create new components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q16",
          "question": "What is the purpose of React.lazy?",
          "options": [
            "To style components",
            "To handle routing",
            "To render dynamic imports as regular components",
            "To create new components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q17",
          "question": "What is the purpose of Suspense?",
          "options": [
            "To style components",
            "To handle routing",
            "To specify a loading state while waiting for code to load",
            "To create new components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q18",
          "question": "What is the difference between useEffect and useLayoutEffect?",
          "options": [
            "useEffect is for styling, useLayoutEffect is for data",
            "useEffect runs after render, useLayoutEffect runs synchronously",
            "useEffect is for functions, useLayoutEffect is for variables",
            "useEffect is for HTML, useLayoutEffect is for CSS"
          ],
          "correctAnswer": 1
        },
        {
          "id": "q19",
          "question": "What is the purpose of useRef?",
          "options": [
            "To style components",
            "To handle routing",
            "To access DOM elements or store mutable values",
            "To create new components"
          ],
          "correctAnswer": 2
        },
        {
          "id": "q20",
          "question": "What is the purpose of useReducer?",
          "options": [
            "To style components",
            "To handle routing",
            "To manage state with a reducer function",
            "To create new components"
          ],
          "correctAnswer": 2
        }
      ]
    }
  ]
}